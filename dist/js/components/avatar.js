import{AvatarAPI,ClaimsAPI,XAuthAPI}from"../core/api.js";import{state}from"../core/state.js";import{showToast}from"../utils/toast.js";import{formatDate,shortenAddress,getActionIcon,getTierColorClass,getTier}from"../utils/formatting.js";export async function showAvatarDetailsModal(t){const e=document.getElementById("avatar-modal"),n=document.getElementById("avatar-modal-content");if(e&&n){e.classList.remove("hidden"),e.classList.add("flex"),n.innerHTML='\n    <div class="text-center p-8">\n      <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600 mx-auto"></div>\n      <p class="mt-2 text-gray-400">Loading avatar details...</p>\n    </div>\n  ';try{const[e,s,a,r,o,i]=await Promise.all([AvatarAPI.getAvatarById(t),XAuthAPI.getStatus(t),ClaimsAPI.getStatus(t),AvatarAPI.getNarratives(t),AvatarAPI.getActions(t),AvatarAPI.getStats(t)]),l={...e,stats:i,narratives:r?.narratives||[],actions:o?.actions||[]};state.selectedAvatar=l,window.selectedAvatar=l;const d=processXAuthStatus(s),c=a?.claimed||!1,v=a?.claimedBy||"",m=c&&v?.toLowerCase()===state.wallet?.publicKey?.toLowerCase();renderAvatarModalContent(n,l,{xAuthStatus:d,claimInfo:{claimed:c,claimedBy:v,isClaimedByCurrentWallet:m}}),setupModalEventListeners(t,d)}catch(t){console.error("Error loading avatar details:",t),n.innerHTML=`\n      <div class="text-center py-12 text-red-500">\n        Failed to load avatar details: ${t.message}\n        <button onclick="closeAvatarModal()" class="block mx-auto mt-4 px-4 py-2 bg-gray-700 rounded">\n          Close\n        </button>\n      </div>\n    `}}else console.error("Avatar modal elements not found")}function processXAuthStatus(t){let e={authorized:!1,statusText:"Not Connected",statusClass:"bg-red-600",showButton:!0,buttonText:"Connect X Account",message:"",loading:!1};return t?(t.authorized?e={authorized:!0,statusText:"Connected",statusClass:"bg-green-600",showButton:!0,buttonText:"Disconnect",message:"Your X account is successfully linked to this avatar.",expiresAt:t.expiresAt,isDisconnect:!0}:t.requiresReauth&&(e={authorized:!1,statusText:"Authorization Required",statusClass:"bg-yellow-600",showButton:!0,buttonText:"Connect X Account",message:t.error||"Your X authorization needs to be renewed."}),e):e}function renderAvatarModalContent(t,e,n){const{xAuthStatus:s,claimInfo:a}=n,r=a.isClaimedByCurrentWallet?`\n    <div class="mt-4 border-t border-gray-700 pt-4">\n      <h3 class="font-medium text-lg mb-2">X Connection Status</h3>\n      <div class="flex items-center justify-between">\n        <span class="px-2 py-1 rounded text-sm ${s.statusClass}">${s.statusText}</span>\n        ${s.showButton?`<button id="xauth-button" class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm">\n            ${s.buttonText}\n          </button>`:""}\n      </div>\n      ${s.message?`<p class="text-sm mt-2 text-gray-400">${s.message}</p>`:""}\n      ${s.expiresAt?`<p class="text-sm mt-1 text-gray-400">Expires: ${formatDate(s.expiresAt)}</p>`:""}\n    </div>\n  `:"",o=!a.claimed&&state.wallet?'<button id="claim-btn" class="mt-4 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded">\n      Claim this Avatar\n    </button>':"";t.innerHTML=`\n    <div class="relative p-6">\n      \x3c!-- Close button --\x3e\n      <button onclick="closeAvatarModal()" class="absolute top-4 right-4 text-gray-400 hover:text-white p-2">\n        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />\n        </svg>\n      </button>\n      \n      \x3c!-- Avatar Details --\x3e\n      ${renderAvatarDetails(e,{claimInfo:a})}\n      \n      \x3c!-- Additional sections for narratives, actions, etc. --\x3e\n      <div class="mt-6 grid grid-cols-1 md:grid-cols-2 gap-6">\n        \x3c!-- Narratives section --\x3e\n        <div class="bg-gray-800 p-4 rounded-lg">\n          <h3 class="text-lg font-bold mb-2">Recent Narratives</h3>\n          ${e.narratives.length>0?`\n            <div class="space-y-3">\n              ${e.narratives.slice(0,3).map((t=>`\n                <div class="bg-gray-700/50 p-3 rounded">\n                  <p class="text-sm text-gray-300">${t.content}</p>\n                  <div class="text-xs text-gray-500 mt-1">\n                    ${formatDate(t.createdAt)}\n                  </div>\n                </div>\n              `)).join("")}\n            </div>\n          `:'<p class="text-gray-400">No narratives available.</p>'}\n        </div>\n        \n        \x3c!-- Actions section --\x3e\n        <div class="bg-gray-800 p-4 rounded-lg">\n          <h3 class="text-lg font-bold mb-2">Recent Actions</h3>\n          ${e.actions.length>0?`\n            <div class="space-y-2">\n              ${e.actions.slice(0,5).map((t=>`\n                <div class="text-sm flex items-center gap-2 bg-gray-700/30 p-2 rounded">\n                  <span class="text-lg">${getActionIcon(t.action)}</span>\n                  <span>${t.description||t.action}</span>\n                </div>\n              `)).join("")}\n            </div>\n          `:'<p class="text-gray-400">No recent actions.</p>'}\n        </div>\n      </div>\n      \n      \x3c!-- X Auth Section --\x3e\n      ${r}\n\n      \x3c!-- Claim Section --\x3e\n      ${o}\n    </div>\n  `}function setupModalEventListeners(t,e){if(e.showButton){const n=document.getElementById("xauth-button");n&&(e.isDisconnect?n.addEventListener("click",(()=>disconnectXAuth(t))):n.addEventListener("click",(()=>initiateXAuth(t))))}const n=document.getElementById("claim-btn");n&&n.addEventListener("click",(()=>claimAvatar(t)))}async function initiateXAuth(t){try{const e=(await import("../services/xService.mjs")).default;showToast("Initiating X authorization...");const n=await e.initiateXAuth(t);n.success?(showToast("X authorization initiated. Please complete the process in the popup window."),window.addEventListener("message",(function e(n){"X_AUTH_SUCCESS"===n.data.type?(showToast("X authorization successful!",{type:"success"}),window.removeEventListener("message",e),showAvatarDetailsModal(t)):"X_AUTH_ERROR"===n.data.type&&(showToast(`X authorization failed: ${n.data.error||"Unknown error"}`,{type:"error"}),window.removeEventListener("message",e))}))):showToast(`Error initiating X authorization: ${n.error}`,{type:"error"})}catch(t){console.error("Error initiating X auth:",t),showToast(`Error initiating X authorization: ${t.message}`,{type:"error"})}}async function disconnectXAuth(t){try{const e=(await import("../services/xService.mjs")).default;showToast("Disconnecting X account...");const n=await e.disconnectXAuth(t);n.success?(showToast("X account disconnected successfully.",{type:"success"}),showAvatarDetailsModal(t)):showToast(`Error disconnecting X account: ${n.error}`,{type:"error"})}catch(t){console.error("Error disconnecting X auth:",t),showToast(`Error disconnecting X account: ${t.message}`,{type:"error"})}}async function claimAvatar(t){try{if(!state.wallet||!state.wallet.publicKey)return void showToast("Please connect your wallet first",{type:"warning"});showToast("Processing claim...");const e=await fetch(`/api/claims/claim/${t}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({walletAddress:state.wallet.publicKey})}),n=await e.json();if(!n.success)throw new Error(n.error||"Failed to claim avatar");showToast("Avatar claimed successfully!",{type:"success"}),closeAvatarModal(),window.loadContent&&window.loadContent()}catch(t){console.error("Claim error:",t),showToast(`Failed to claim avatar: ${t.message}`,{type:"error"})}}export function renderAvatarDetails(t,e={}){const{claimInfo:n={}}=e;return`\n    <div class="flex flex-col md:flex-row gap-6">\n      \x3c!-- Avatar image --\x3e\n      <div class="md:w-1/3">\n        <div class="relative">\n          <img \n            src="${t.imageUrl}" \n            alt="${t.name}" \n            class="w-full aspect-square object-cover rounded-lg"\n            onerror="this.onerror=null; this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'100\\' height=\\'100\\' viewBox=\\'0 0 100 100\\'%3E%3Crect fill=\\'%23333\\' width=\\'100\\' height=\\'100\\'/%3E%3Ctext fill=\\'%23FFF\\' x=\\'50\\' y=\\'50\\' font-size=\\'50\\' text-anchor=\\'middle\\' dominant-baseline=\\'middle\\'%3E${t.name.charAt(0).toUpperCase()}%3C/text%3E%3C/svg%3E';"\n          >\n          ${n.claimed?'\n            <div class="absolute top-2 right-2 px-2 py-1 bg-green-600 text-white text-xs rounded-full">\n              Claimed\n            </div>\n          ':""}\n        </div>\n        \n        \x3c!-- Tier badge --\x3e\n        <div class="mt-3 flex justify-center">\n          <span class="px-3 py-1 rounded text-sm font-bold ${getTierColorClass(t.model)}">\n            Tier ${getTier(t.model)}\n          </span>\n        </div>\n      </div>\n      \n      \x3c!-- Avatar information --\x3e\n      <div class="md:w-2/3">\n        <h2 class="text-2xl font-bold">${t.name}</h2>\n        \n        ${t.description?`\n          <p class="text-gray-300 mt-2">${t.description}</p>\n        `:""}\n        \n        \x3c!-- Stats --\x3e\n        <div class="mt-4 grid grid-cols-2 gap-3">\n          <div class="bg-gray-800/50 p-3 rounded">\n            <div class="text-sm text-gray-400">Score</div>\n            <div class="text-xl font-bold">${t.score||0}</div>\n          </div>\n          <div class="bg-gray-800/50 p-3 rounded">\n            <div class="text-sm text-gray-400">Messages</div>\n            <div class="text-xl font-bold">${t.messageCount||0}</div>\n          </div>\n        </div>\n        \n        \x3c!-- Claim information --\x3e\n        ${n.claimed?`\n          <div class="mt-4 bg-gray-800/50 p-3 rounded">\n            <div class="flex justify-between items-center">\n              <div class="text-sm text-gray-400">Claimed by</div>\n              <div>${shortenAddress(n.claimedBy)}</div>\n            </div>\n          </div>\n        `:""}\n        \n        \x3c!-- Emoji/Tribe --\x3e\n        ${t.emoji?`\n          <div class="mt-4 flex items-center">\n            <span class="text-2xl mr-2">${t.emoji}</span>\n            <span class="text-gray-400">Tribe Member</span>\n          </div>\n        `:""}\n      </div>\n    </div>\n  `}export function renderAvatarCard(t,e={},n=!1,s=""){return`\n    <div class="bg-gray-800 rounded-lg overflow-hidden hover:bg-gray-750 transition-colors ${n?"border-l-2 border-green-500":""}">\n      <div class="aspect-w-1 aspect-h-1">\n        <img \n          src="${t.thumbnailUrl||t.imageUrl}" \n          alt="${t.name}" \n          class="w-full h-full object-cover"\n          onerror="this.onerror=null; this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'100\\' height=\\'100\\' viewBox=\\'0 0 100 100\\'%3E%3Crect fill=\\'%23333\\' width=\\'100\\' height=\\'100\\'/%3E%3Ctext fill=\\'%23FFF\\' x=\\'50\\' y=\\'50\\' font-size=\\'50\\' text-anchor=\\'middle\\' dominant-baseline=\\'middle\\'%3E${t.name.charAt(0).toUpperCase()}%3C/text%3E%3C/svg%3E';"\n        >\n      </div>\n      <div class="p-4">\n        <div class="flex justify-between items-start mb-2">\n          <h3 class="font-bold text-lg truncate">${t.name}</h3>\n          <span class="px-2 py-0.5 rounded text-xs font-bold ${getTierColorClass(t.model)}">\n            ${getTier(t.model)}\n          </span>\n        </div>\n        <p class="text-sm text-gray-400 truncate">${t.description||""}</p>\n        ${n?'<div class="mt-2 text-xs text-green-400 flex items-center">\n            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />\n            </svg>\n            Claimed\n          </div>':""}\n      </div>\n    </div>\n  `}export function renderLeaderboardCard(t,e=!1){return`\n    <div class="avatar-card bg-gray-800 p-3 rounded-lg hover:bg-gray-700 transition-colors ${e?"border-l-2 border-green-500":""}">\n      <div class="flex gap-3 items-center">\n        <div class="relative">\n          <img \n            src="${t.thumbnailUrl||t.imageUrl}" \n            alt="${t.name}" \n            class="w-16 h-16 object-cover rounded-full border-2 border-gray-600"\n            onerror="this.onerror=null; this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'100\\' height=\\'100\\' viewBox=\\'0 0 100 100\\'%3E%3Crect fill=\\'%23333\\' width=\\'100\\' height=\\'100\\'/%3E%3Ctext fill=\\'%23FFF\\' x=\\'50\\' y=\\'50\\' font-size=\\'50\\' text-anchor=\\'middle\\' dominant-baseline=\\'middle\\'%3E${t.name.charAt(0).toUpperCase()}%3C/text%3E%3C/svg%3E';"\n          >\n          ${e?'<div class="absolute -top-1 -right-1 bg-green-500 rounded-full w-5 h-5 flex items-center justify-center text-xs">✓</div>':""}\n        </div>\n        \n        <div class="flex-1 min-w-0">\n          <h3 class="text-sm font-semibold truncate">${t.name}</h3>\n          <p class="text-xs text-gray-400">Score: ${t.score||0}</p>\n          \n          <div class="flex items-center gap-2 mt-1">\n            <span class="px-1.5 py-0.5 rounded text-xs font-bold ${getTierColorClass(t.model)}">\n              Tier ${getTier(t.model)}\n            </span>\n            ${e?'<span class="text-xs text-green-400">Claimed</span>':""}\n          </div>\n        </div>\n      </div>\n    </div>\n  `}window.AvatarDetails={renderAvatarCard,renderLeaderboardCard,renderAvatarDetails};