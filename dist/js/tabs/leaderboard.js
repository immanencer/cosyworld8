import{LeaderboardAPI,ClaimsAPI}from"../core/api.js";import{state}from"../core/state.js";export async function loadContent(){const e=document.getElementById("content");if(e)try{e.innerHTML='\n      <div class="max-w-7xl mx-auto px-4">\n        <h1 class="text-3xl font-bold mb-6">Leaderboard</h1>\n        <div id="leaderboard-items" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3"></div>\n        <div id="leaderboard-loader" class="text-center py-8 hidden">\n          <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600 mx-auto"></div>\n          <p class="mt-2 text-gray-400">Loading more avatars...</p>\n        </div>\n      </div>',"leaderboard"===state.activeTab?window.scrollState={page:1,loading:!1,hasMore:!0,initialized:!1}:window.scrollState=window.scrollState||{page:1,loading:!1,hasMore:!0};const a=await LeaderboardAPI.getLeaderboard({page:1,limit:12}),t=document.getElementById("leaderboard-items"),r=document.getElementById("leaderboard-loader");if(!a.avatars||0===a.avatars.length)return void renderEmptyState(t);renderLeaderboardItems(t,await Promise.all(a.avatars.map((async e=>{try{const a=await ClaimsAPI.getStatus(e._id);return{...e,isClaimed:a.claimed||!1,claimedBy:a.claimedBy||""}}catch(a){return console.warn(`Failed to get claim status for avatar ${e._id}:`,a),{...e,isClaimed:!1,claimedBy:""}}})))),setupInfiniteScroll(r,t)}catch(a){console.error("Load Leaderboard error:",a),e.innerHTML=`\n      <div class="text-center py-12 text-red-500">\n        Failed to load leaderboard: ${a.message}\n        <button class="mt-4 px-4 py-2 bg-primary-600 rounded" onclick="loadContent()">\n          Retry\n        </button>\n      </div>\n    `}}function renderEmptyState(e){e.innerHTML='\n    <div class="col-span-full text-center py-4">\n      <h2 class="text-xl font-bold mb-2">No Leaderboard Data Available</h2>\n      <p class="text-gray-400">Check back later for updated rankings.</p>\n    </div>\n  '}function renderLeaderboardItems(e,a){const{renderLeaderboardCard:t}=window.AvatarDetails||{},r=a.map((e=>`\n    <div onclick="showAvatarDetails('${e._id}')" class="cursor-pointer">\n      ${"function"==typeof t?t(e,e.isClaimed):defaultRenderLeaderboardCard(e,e.isClaimed)}\n    </div>\n  `)).join("");e.innerHTML=r}function defaultRenderLeaderboardCard(e,a){const t=e=>e?e.includes("gpt-4")?"S":e.includes("gpt-3.5")?"A":e.includes("claude")?"B":"C":"U";return`\n    <div class="avatar-card bg-gray-800 p-3 rounded-lg hover:bg-gray-700 transition-colors ${a?"border-l-2 border-green-500":""}">\n      <div class="flex gap-3 items-center">\n        <div class="relative">\n          <img \n            src="${e.thumbnailUrl||e.imageUrl}" \n            alt="${e.name}" \n            class="w-16 h-16 object-cover rounded-full border-2 border-gray-600"\n            onerror="this.onerror=null; this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'100\\' height=\\'100\\' viewBox=\\'0 0 100 100\\'%3E%3Crect fill=\\'%23333\\' width=\\'100\\' height=\\'100\\'/%3E%3Ctext fill=\\'%23FFF\\' x=\\'50\\' y=\\'50\\' font-size=\\'50\\' text-anchor=\\'middle\\' dominant-baseline=\\'middle\\'%3E${e.name.charAt(0).toUpperCase()}%3C/text%3E%3C/svg%3E';"\n          >\n          ${a?'<div class="absolute -top-1 -right-1 bg-green-500 rounded-full w-5 h-5 flex items-center justify-center text-xs">âœ“</div>':""}\n        </div>\n        \n        <div class="flex-1 min-w-0">\n          <h3 class="text-sm font-semibold truncate">${e.name}</h3>\n          <p class="text-xs text-gray-400">Score: ${e.score||0}</p>\n          \n          <div class="flex items-center gap-2 mt-1">\n            <span class="px-1.5 py-0.5 rounded text-xs font-bold ${(e=>{const a={S:"bg-purple-600",A:"bg-blue-600",B:"bg-green-600",C:"bg-yellow-600",U:"bg-gray-600"};return a[t(e)]||a.U})(e.model)}">\n              Tier ${t(e.model)}\n            </span>\n            ${a?'<span class="text-xs text-green-400">Claimed</span>':""}\n          </div>\n        </div>\n      </div>\n    </div>\n  `}function setupInfiniteScroll(e,a){e&&a&&(window.loadMoreLeaderboard=async()=>{if(!window.scrollState.loading&&window.scrollState.hasMore){window.scrollState.loading=!0,e.classList.remove("hidden");try{const t=window.scrollState.page+1,r=await LeaderboardAPI.getLeaderboard({page:t,limit:12});if(!r.avatars||0===r.avatars.length)return window.scrollState.hasMore=!1,void e.classList.add("hidden");const n=await Promise.all(r.avatars.map((async e=>{try{const a=await ClaimsAPI.getStatus(e._id);return{...e,isClaimed:a.claimed||!1,claimedBy:a.claimedBy||""}}catch(a){return console.warn(`Failed to get claim status for avatar ${e._id}:`,a),{...e,isClaimed:!1,claimedBy:""}}}))),d=document.createDocumentFragment();n.forEach((e=>{const a=document.createElement("div");a.className="cursor-pointer",a.onclick=()=>window.showAvatarDetails(e._id);const{renderLeaderboardCard:t}=window.AvatarDetails||{};a.innerHTML="function"==typeof t?t(e,e.isClaimed):defaultRenderLeaderboardCard(e,e.isClaimed),d.appendChild(a)})),a.appendChild(d),window.scrollState.page=t}catch(e){console.error("Failed to load more leaderboard items:",e);const t=document.createElement("div");t.className="col-span-full text-center py-4 text-red-500",t.innerHTML=`\n        Error loading more items: ${e.message}\n        <button class="ml-2 px-3 py-1 bg-blue-600 text-white rounded" onclick="loadMoreLeaderboard()">\n          Retry\n        </button>\n      `,a.appendChild(t)}finally{window.scrollState.loading=!1,window.scrollState.hasMore?e.classList.remove("hidden"):e.classList.add("hidden")}}},new IntersectionObserver((e=>{e[0].isIntersecting&&!window.scrollState.loading&&window.scrollState.hasMore&&window.loadMoreLeaderboard()}),{threshold:.1}).observe(e),e.classList.remove("hidden"))}