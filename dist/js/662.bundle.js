(self.webpackChunkmoonstone_sanctum=self.webpackChunkmoonstone_sanctum||[]).push([[662],{662:(t,n,e)=>{e.r(n),e.d(n,{loadContent:()=>o});var a=e(318),i=e(903),r=e(522),s=e(350);async function o(){const t=document.getElementById("content");if(t)if(a.wk.wallet&&a.wk.wallet.publicKey)try{const n=await i.MD.getAvatars({walletAddress:a.wk.wallet.publicKey,view:"claims",page:1,limit:12});if(!n.avatars||0===n.avatars.length)return void(t.innerHTML='\n    <div class="max-w-4xl mx-auto px-4">\n      <div class="text-center py-12">\n        <h2 class="text-2xl font-bold mb-4">No Squad Members Found</h2>\n        <p class="text-gray-400 mb-6">\n          You haven\'t claimed any avatars yet. Explore the leaderboard to find avatars to claim!\n        </p>\n        <button \n          onclick="setActiveTab(\'leaderboard\')" \n          class="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded transition"\n        >\n          Browse Leaderboard\n        </button>\n      </div>\n    </div>\n  ');!function(t,n){const e=window.AvatarDetails?.renderAvatarCard||l;t.innerHTML=`\n    <div class="max-w-7xl mx-auto px-4">\n      <div class="text-center py-4">\n        <h2 class="text-xl font-bold">Wallet: ${(0,s.Wr)(a.wk.wallet.publicKey)}</h2>\n      </div>\n      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">\n        ${n.map((t=>`\n          <div onclick="showAvatarDetails('${t._id}')" class="cursor-pointer relative">\n            ${e(t,null,t.isClaimed,t.claimedBy)}\n            ${"unminted"===t.mintStatus?'<div class="absolute top-2 right-2 px-2 py-1 bg-yellow-600 text-white text-xs rounded-full">\n              Unminted\n            </div>':""}\n          </div>\n        `)).join("")}\n      </div>\n      <div id="claims-container" class="mt-8"></div>\n      <div id="claim-form-container" class="mt-8 hidden"></div>\n    </div>\n  `}(t,await Promise.all(n.avatars.map((async t=>{try{const n=await i.YJ.getStatus(t._id);return{...t,mintStatus:n.claimed&&!n.minted?"unminted":"minted",isClaimed:n.claimed,claimedBy:n.claimedBy||""}}catch(n){return console.warn(`Failed to get claim status for avatar ${t._id}:`,n),{...t,mintStatus:"unknown",isClaimed:!1,claimedBy:""}}})))),await async function(){const t=document.getElementById("claims-container");if(t&&a.wk.wallet)try{const n=await fetch(`/api/claims?walletAddress=${a.wk.wallet.publicKey}`),e=await n.json();if(!e.claims||0===e.claims.length)return void(t.innerHTML="");t.innerHTML=`\n      <div class="mt-8 bg-gray-800 rounded-lg p-6">\n        <h3 class="text-xl font-bold mb-4">Your Claims</h3>\n        <div class="space-y-4">\n          ${e.claims.map((t=>`\n            <div class="bg-gray-700 p-4 rounded-lg">\n              <div class="flex justify-between items-center">\n                <div>\n                  <p class="font-medium">${t.avatarName||"Avatar"}</p>\n                  <p class="text-sm text-gray-400">${new Date(t.claimedAt).toLocaleString()}</p>\n                </div>\n                <div>\n                  ${t.minted?'<span class="px-2 py-1 bg-green-600 text-white text-sm rounded-full">Minted</span>':`<button \n                      onclick="mintClaim('${t._id}')"\n                      class="px-3 py-1 bg-primary-600 hover:bg-primary-700 text-white text-sm rounded transition"\n                    >\n                      Mint Now\n                    </button>`}\n                </div>\n              </div>\n            </div>\n          `)).join("")}\n        </div>\n      </div>\n    `,window.mintClaim=c}catch(n){console.error("Load claims error:",n),t.innerHTML=`\n      <div class="mt-8 bg-gray-800 rounded-lg p-6">\n        <p class="text-red-500">Failed to load claims: ${n.message}</p>\n      </div>\n    `}}()}catch(n){console.error("Load Squad error:",n),t.innerHTML=`\n      <div class="text-center py-12 text-red-500">\n        Failed to load Squad: ${n.message}\n        <button class="mt-4 px-4 py-2 bg-primary-600 rounded" onclick="loadContent()">\n          Retry\n        </button>\n      </div>\n    `}else t.innerHTML='\n    <div class="text-center py-12">\n      <p class="mb-4">Connect your wallet to view your Squad</p>\n      <button class="px-4 py-2 bg-primary-600 hover:bg-primary-700 rounded text-white transition" onclick="connectWallet()">\n        Connect Wallet\n      </button>\n    </div>\n  '}function l(t,n,e,a){return`\n    <div class="bg-gray-800 rounded-lg overflow-hidden hover:bg-gray-750 transition-colors ${e?"border-l-2 border-green-500":""}">\n      <div class="aspect-w-1 aspect-h-1 relative">\n        <img \n          src="${t.thumbnailUrl||t.imageUrl}" \n          alt="${t.name}" \n          class="object-cover w-full h-full"\n          onerror="this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'100\\' height=\\'100\\' viewBox=\\'0 0 100 100\\'%3E%3Crect fill=\\'%23333\\' width=\\'100\\' height=\\'100\\'/%3E%3Ctext fill=\\'%23FFF\\' x=\\'50\\' y=\\'50\\' font-size=\\'50\\' text-anchor=\\'middle\\' dominant-baseline=\\'middle\\'%3E${t.name.charAt(0).toUpperCase()}%3C/text%3E%3C/svg%3E';"\n        >\n      </div>\n      <div class="p-4">\n        <h3 class="font-bold text-lg truncate">${t.name}</h3>\n        <p class="text-sm text-gray-400 mt-1 truncate">${t.description||""}</p>\n      </div>\n    </div>\n  `}async function c(t){try{(0,r.P)("Minting started...");const n=await fetch(`/api/claims/mint/${t}`,{method:"POST",headers:{"Content-Type":"application/json"}}),e=await n.json();if(!e.success)throw new Error(e.error||"Minting failed");(0,r.P)("Minting successful!",{type:"success"}),o()}catch(t){console.error("Mint error:",t),(0,r.P)(`Minting failed: ${t.message}`,{type:"error"})}}},903:(t,n,e)=>{e.d(n,{D2:()=>s,MD:()=>r,YJ:()=>o,c3:()=>m,cy:()=>d,h5:()=>c,im:()=>l});var a=e(409);async function i(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};try{const e=await fetch(t,n);if(!e.ok){const t=await e.json().catch((()=>null)),n=t?.message||`HTTP error: ${e.status}`;throw new Error(n)}return e.json()}catch(n){throw console.error(`API Error (${t}):`,n),n}}e(522);const r={getAvatars:async function(){const t=new URLSearchParams(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).toString();return i(`${a.Hr.AVATARS}?${t}`)},getAvatarById:t=>i(`${a.Hr.AVATARS}/${t}`),getNarratives:t=>i(`${a.Hr.AVATARS}/${t}/narratives`),getActions:t=>i(`${a.Hr.AVATARS}/${t}/dungeon-actions`),getStats:t=>i(`${a.Hr.AVATARS}/${t}/stats`)},s={getStatus:t=>i(`${a.Hr.XAUTH}/status/${t}`),initiateAuth:function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return i(`${a.Hr.XAUTH}/initiate/${t}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)})},disconnect:t=>i(`${a.Hr.XAUTH}/disconnect/${t}`,{method:"POST"})},o={getStatus:t=>i(`${a.Hr.CLAIMS}/status/${t}`),claimAvatar:function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return i(`${a.Hr.CLAIMS}/claim/${t}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)})}},l={getCounts:()=>i(`${a.Hr.TRIBES}/counts`),getTribeByEmoji:t=>i(`${a.Hr.TRIBES}/${t}`)},c={getActionLog:function(){const t=new URLSearchParams(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).toString();return i(`${a.Hr.DUNGEON}/log?${t}`)}},d={getPosts:function(){const t=new URLSearchParams(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).toString();return i(`${a.Hr.SOCIAL}/posts?${t}`)}},m={getLeaderboard:function(){const t=new URLSearchParams(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).toString();return i(`${a.Hr.LEADERBOARD}?${t}`)}}}}]);