(self.webpackChunkmoonstone_sanctum=self.webpackChunkmoonstone_sanctum||[]).push([[303],{303:(t,n,e)=>{e.r(n),e.d(n,{loadContent:()=>o});var a=e(903),s=e(350);async function o(){const t=document.getElementById("content");if(t)try{const n=await a.h5.getActionLog();if(!n||0===n.length)return void(t.innerHTML='\n    <div class="max-w-4xl mx-auto px-4">\n      <div class="text-center py-12">\n        <h2 class="text-2xl font-bold mb-4">No Actions Found</h2>\n        <p class="text-gray-400 mb-6">\n          There are no actions to display at this time.\n        </p>\n      </div>\n    </div>\n  ');!function(t,n){t.innerHTML=`\n    <div class="max-w-6xl mx-auto px-4">\n      <h1 class="text-3xl font-bold mb-6">Action Log</h1>\n      <div class="space-y-4">\n        ${n.map((t=>{const n=t.actorName||"Unknown",e=n.charAt(0).toUpperCase(),a=t.actorImageUrl||"";let o="",r=(0,s.Yb)(t.action);switch(t.action){case"attack":o=`${n} attacked ${t.targetName||"a target"}`;break;case"defend":o=`${n} took a defensive stance`;break;case"move":o=`${n} moved to ${t.targetName||t.location?.name||"a location"}`;break;case"remember":o=`${n} formed a memory`;break;case"xpost":o=`${n} posted to X`;break;case"post":o=`${n} posted to the social feed`;break;default:o=`${n} used ${t.action||"an action"}`}return`\n            <div class="bg-gray-800 p-4 rounded-lg hover:bg-gray-750 transition-colors">\n              <div class="flex items-start gap-3">\n                \x3c!-- Actor image with fallbacks --\x3e\n                ${a?`\n                  <img \n                    src="${a}" \n                    alt="${n}" \n                    class="w-12 h-12 rounded-full object-cover flex-shrink-0"\n                    onerror="this.onerror=null; this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'100\\' height=\\'100\\' viewBox=\\'0 0 100 100\\'%3E%3Crect fill=\\'%23333\\' width=\\'100\\' height=\\'100\\'/%3E%3Ctext fill=\\'%23FFF\\' x=\\'50\\' y=\\'50\\' font-size=\\'50\\' text-anchor=\\'middle\\' dominant-baseline=\\'middle\\'%3E${e}%3C/text%3E%3C/svg%3E';"\n                  >\n                `:`\n                  <div class="w-12 h-12 rounded-full bg-gray-700 flex items-center justify-center text-xl flex-shrink-0">\n                    ${e}\n                  </div>\n                `}\n                \n                <div class="flex-1">\n                  \x3c!-- Action header --\x3e\n                  <div class="flex justify-between">\n                    <div class="font-medium">\n                      <span class="text-lg mr-2">${r}</span>\n                      <span class="text-white">${o}</span>\n                    </div>\n                    \n                    \x3c!-- Toggle action details button --\x3e\n                    <button \n                      class="text-gray-400 hover:text-white" \n                      onclick="this.closest('.bg-gray-800').querySelector('.action-details').classList.toggle('hidden')"\n                    >\n                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />\n                      </svg>\n                    </button>\n                  </div>\n                  \n                  \x3c!-- Timestamp --\x3e\n                  <div class="text-sm text-gray-400 mt-1">\n                    ${(0,s.Yq)(t.timestamp||Date.now())}\n                  </div>\n                  \n                  \x3c!-- Collapsible details --\x3e\n                  <div class="action-details hidden mt-4">\n                    ${t.result?`\n                      <div class="bg-gray-700 p-3 rounded mt-2">\n                        <h4 class="font-medium mb-1 text-gray-300">Result</h4>\n                        <p class="text-gray-300 text-sm whitespace-pre-wrap">${t.result.replace(/^‚ú® Posted to X and feed:\s*/,"")}</p>\n                      </div>\n                    `:""}\n                    \n                    ${t.memory?`\n                      <div class="bg-gray-700 p-3 rounded mt-2">\n                        <h4 class="font-medium mb-1 text-gray-300">Memory</h4>\n                        <p class="text-gray-300 text-sm whitespace-pre-wrap">${t.memory.replace(/\[üß† Memory generated:\s*"(.*?)"\]$/s,"$1")}</p>\n                      </div>\n                    `:""}\n                    \n                    ${t.tweet?`\n                      <div class="bg-gray-700 p-3 rounded mt-2">\n                        <h4 class="font-medium mb-1 flex items-center gap-2 text-gray-300">\n                          <span class="text-lg">üê¶</span> Posted to X\n                        </h4>\n                        <p class="text-gray-300 text-sm">${t.tweet}</p>\n                      </div>\n                    `:""}\n                    \n                    ${t.location?.imageUrl?`\n                      <div class="mt-2">\n                        <h4 class="font-medium mb-1 text-gray-300">Location</h4>\n                        <img \n                          src="${t.location.imageUrl}" \n                          alt="${t.location.name||"Location"}" \n                          class="w-full h-32 object-cover rounded"\n                          onerror="this.onerror=null; this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'100\\' height=\\'100\\' viewBox=\\'0 0 100 100\\'%3E%3Crect fill=\\'%23444\\' width=\\'100\\' height=\\'100\\'/%3E%3Ctext fill=\\'%23FFF\\' x=\\'50\\' y=\\'50\\' font-size=\\'24\\' text-anchor=\\'middle\\' dominant-baseline=\\'middle\\'%3ELocation Image Not Available%3C/text%3E%3C/svg%3E';"\n                        >\n                        ${t.location.description?`\n                          <p class="text-gray-400 text-sm mt-1">${t.location.description}</p>\n                        `:""}\n                      </div>\n                    `:""}\n                  </div>\n                </div>\n              </div>\n            </div>\n          `})).join("")}\n      </div>\n    </div>\n  `}(t,n)}catch(n){console.error("Load Action Log error:",n),t.innerHTML=`\n      <div class="text-center py-12 text-red-500">\n        Failed to load actions: ${n.message}\n        <button class="mt-4 px-4 py-2 bg-primary-600 rounded" onclick="loadContent()">\n          Retry\n        </button>\n      </div>\n    `}}},903:(t,n,e)=>{e.d(n,{D2:()=>r,MD:()=>o,YJ:()=>i,c3:()=>g,cy:()=>d,h5:()=>l,im:()=>c});var a=e(409);async function s(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};try{const e=await fetch(t,n);if(!e.ok){const t=await e.json().catch((()=>null)),n=t?.message||`HTTP error: ${e.status}`;throw new Error(n)}return e.json()}catch(n){throw console.error(`API Error (${t}):`,n),n}}e(522);const o={getAvatars:async function(){const t=new URLSearchParams(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).toString();return s(`${a.Hr.AVATARS}?${t}`)},getAvatarById:t=>s(`${a.Hr.AVATARS}/${t}`),getNarratives:t=>s(`${a.Hr.AVATARS}/${t}/narratives`),getActions:t=>s(`${a.Hr.AVATARS}/${t}/dungeon-actions`),getStats:t=>s(`${a.Hr.AVATARS}/${t}/stats`)},r={getStatus:t=>s(`${a.Hr.XAUTH}/status/${t}`),initiateAuth:function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return s(`${a.Hr.XAUTH}/initiate/${t}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)})},disconnect:t=>s(`${a.Hr.XAUTH}/disconnect/${t}`,{method:"POST"})},i={getStatus:t=>s(`${a.Hr.CLAIMS}/status/${t}`),claimAvatar:function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return s(`${a.Hr.CLAIMS}/claim/${t}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)})}},c={getCounts:()=>s(`${a.Hr.TRIBES}/counts`),getTribeByEmoji:t=>s(`${a.Hr.TRIBES}/${t}`)},l={getActionLog:function(){const t=new URLSearchParams(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).toString();return s(`${a.Hr.DUNGEON}/log?${t}`)}},d={getPosts:function(){const t=new URLSearchParams(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).toString();return s(`${a.Hr.SOCIAL}/posts?${t}`)}},g={getLeaderboard:function(){const t=new URLSearchParams(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).toString();return s(`${a.Hr.LEADERBOARD}?${t}`)}}}}]);