import{setWallet}from"../core/state.js";import{showToast}from"../utils/toast.js";import{shortenAddress}from"../utils/formatting.js";export function initializeWallet(){const t=document.querySelector(".wallet-container");if(t&&!t.querySelector("button")){t.innerHTML='\n      <button id="wallet-connect-btn" class="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded transition">\n        Connect Wallet\n      </button>\n    ';const n=document.getElementById("wallet-connect-btn");n&&n.addEventListener("click",connectWallet)}autoConnectWallet(),updateWalletUI(),window.connectWallet=connectWallet,window.disconnectWallet=disconnectWallet}function autoConnectWallet(){const t=window?.phantom?.solana;t?t.connect({onlyIfTrusted:!0}).then((t=>{t?.publicKey&&handleSuccessfulConnection(t)})).catch((t=>{console.warn("Auto-connect failed or not trusted:",t)})):console.log("No compatible wallet provider found for auto-connect")}export async function connectWallet(){try{const t=window?.phantom?.solana;if(!t)return showToast("Please install Phantom wallet",{type:"warning"}),null;const n=await t.connect();return handleSuccessfulConnection(n),n}catch(t){return console.error("Wallet connection error:",t),showToast(`Wallet connection failed: ${t.message}`,{type:"error"}),null}}export function disconnectWallet(){try{const t=window?.phantom?.solana;t&&t.disconnect&&t.disconnect(),setWallet(null),updateWalletUI(),showToast("Wallet disconnected",{type:"info"}),window.loadContent&&window.loadContent()}catch(t){console.error("Wallet disconnect error:",t),showToast(`Error disconnecting wallet: ${t.message}`,{type:"error"})}}function handleSuccessfulConnection(t){if(!t?.publicKey)return void console.error("Invalid connection object");const n={publicKey:t.publicKey.toString(),isConnected:!0};setWallet(n),updateWalletUI(),showToast(`Wallet connected: ${shortenAddress(n.publicKey)}`,{type:"success"}),window.loadContent&&window.loadContent()}export function updateWalletUI(){const t=document.querySelector(".wallet-container"),n=window.state||{};if(t)if(n.wallet&&n.wallet.publicKey){t.innerHTML=`\n      <div class="flex items-center space-x-2">\n        <span class="text-green-400 text-sm">‚óè</span>\n        <span class="text-gray-200">${shortenAddress(n.wallet.publicKey)}</span>\n        <button id="wallet-disconnect-btn" class="text-gray-400 hover:text-white">\n          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />\n          </svg>\n        </button>\n      </div>\n    `;const e=document.getElementById("wallet-disconnect-btn");e&&e.addEventListener("click",disconnectWallet)}else{t.innerHTML='\n      <button id="wallet-connect-btn" class="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded transition">\n        Connect Wallet\n      </button>\n    ';const n=document.getElementById("wallet-connect-btn");n&&n.addEventListener("click",connectWallet)}}