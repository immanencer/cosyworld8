const t="/api/xauth",e=new class{async initiateXAuth(e){try{const r=await fetch(`${t}/status/${e}`);if((await r.json()).authorized)return confirm("This avatar is already connected to X. Do you want to disconnect it?")?this.disconnectXAuth(e):{success:!1,error:"Operation cancelled"};const o=await fetch(`${t}/initiate/${e}`,{method:"POST",headers:{"Content-Type":"application/json"}}),s=await o.json();if(s.authUrl){const t=window.open(s.authUrl,"xauth","width=600,height=800,status=yes,scrollbars=yes");if(!t||t.closed||void 0===t.closed)throw new Error("Popup blocked! Please allow popups for this website.");return{success:!0,popup:t}}throw new Error(s.error||"Failed to initiate X authorization")}catch(t){return console.error("X Auth Error:",t),{success:!1,error:t.message}}}async disconnectXAuth(e){try{const r=await fetch(`${t}/disconnect/${e}`,{method:"POST",headers:{"Content-Type":"application/json"}}),o=await r.json();if(o.success)return{success:!0};throw new Error(o.error||"Failed to disconnect X authorization")}catch(t){return console.error("X Disconnect Error:",t),{success:!1,error:t.message}}}async checkXAuthStatus(e){try{const r=await fetch(`${t}/status/${e}`),o=await r.json();return{success:!0,authorized:o.authorized||!1,requiresReauth:o.requiresReauth||!1,expiresAt:o.expiresAt,error:o.error}}catch(t){return console.error("X Status Check Error:",t),{success:!1,authorized:!1,error:t.message}}}async postToX(e,r){try{const o=await this.checkXAuthStatus(e);if(!o.authorized)throw new Error("This avatar is not authorized to post to X");if(o.requiresReauth)throw new Error("X authorization expired. Please reconnect.");const s=await fetch(`${t}/post/${e}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({content:r})}),a=await s.json();if(a.success)return{success:!0,tweetId:a.tweetId,tweetUrl:a.tweetUrl};throw new Error(a.error||"Failed to post to X")}catch(t){return console.error("X Post Error:",t),{success:!1,error:t.message}}}};export default e;