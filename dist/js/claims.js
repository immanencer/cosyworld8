let claims=[],allowance={allowed:!1,remaining:0,current:0},pendingSignatures={};const claimsContainer=document.getElementById("claims-container"),claimFormContainer=document.getElementById("claim-form-container");function onWalletConnected(){loadUserClaims()}function onWalletDisconnected(){claims=[],allowance={allowed:!1,remaining:0,current:0},claimsContainer&&(claimsContainer.innerHTML='<div class="text-center py-8">Connect your wallet to view claims</div>'),claimFormContainer&&claimFormContainer.classList.add("hidden")}async function loadUserClaims(){if(!state.wallet)return;const e=document.getElementById("claims-container");if(e){e.innerHTML='\n    <div class="text-center py-8">\n      <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600 mx-auto"></div>\n      <p class="mt-2 text-gray-400">Loading your claims...</p>\n    </div>\n  ';try{const e=await fetch(`/api/claims/user/${state.wallet.publicKey}`),n=await e.json();if(!e.ok)throw new Error(n.error||"Failed to fetch claims");claims=n.claims||[],allowance=n.allowance||{allowed:!1,remaining:0,current:0},renderClaims(),renderClaimForm()}catch(n){console.error("Load claims error:",n),e.innerHTML=`\n      <div class="text-center py-8 text-red-500">\n        Failed to load claims: ${n.message}\n        <button onclick="loadUserClaims()" class="block mx-auto mt-4 px-4 py-2 bg-gray-700 rounded">\n          Retry\n        </button>\n      </div>\n    `}}else console.error("Claims container not found when rendering claims")}function renderClaims(){const e=document.getElementById("claims-container");e?0!==claims.length?e.innerHTML=`\n    <div class="mb-4">\n      <h2 class="text-xl font-bold">Your Claims</h2>\n      <p class="text-sm text-gray-400">\n        You have claimed ${allowance.current} avatar${1!==allowance.current?"s":""}.\n        ${allowance.allowed?`You can claim ${allowance.remaining} more.`:"You have reached your claim limit."}\n      </p>\n    </div>\n    <div class="flex space-x-2">\n      ${claims.map((e=>renderClaimIcon(e))).join("")}\n    </div>\n  `:e.innerHTML=`\n      <div class="text-center py-8 text-gray-400">\n        You haven't claimed any avatars yet.\n        ${allowance.allowed?`<p class="mt-2">You can claim up to ${allowance.remaining} more avatars.</p>`:'<p class="mt-2">You have reached your claim limit.</p>'}\n      </div>\n    `:console.error("Claims container not found when rendering claims")}function renderClaimIcon(e){const{claim:n,avatar:t}=e;return t?`\n    <div class="relative group">\n      <img \n        src="${t.thumbnailUrl||t.imageUrl||""}" \n        alt="${t.name||"Avatar"}" \n        class="w-16 h-16 object-cover rounded-full"\n        onerror="this.onerror=null; this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'100\\' height=\\'100\\' viewBox=\\'0 0 100 100\\'%3E%3Crect fill=\\'%23333\\' width=\\'100\\' height=\\'100\\'/%3E%3Ctext fill=\\'%23FFF\\' x=\\'50\\' y=\\'50\\' font-size=\\'50\\' text-anchor=\\'middle\\' dominant-baseline=\\'middle\\'%3E${(t.name||"A").charAt(0).toUpperCase()}%3C/text%3E%3C/svg%3E';"\n      >\n      <button \n        onclick="renounceClaim('${n.avatarId}')"\n        class="absolute top-0 right-0 bg-red-600 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition"\n      >\n        &times;\n      </button>\n    </div>\n  `:'\n      <div class="relative">\n        <div class="w-16 h-16 bg-gray-800 rounded-full flex items-center justify-center">\n          <span class="text-gray-400">N/A</span>\n        </div>\n      </div>\n    '}async function renounceClaim(e){try{const n=await fetch("/api/claims/renounce",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({avatarId:e,walletAddress:state.wallet.publicKey})}),t=await n.json();if(!n.ok)throw new Error(t.error||"Failed to renounce claim");await loadUserClaims(),showAlert("Claim renounced successfully!")}catch(e){console.error("Renounce claim error:",e),showAlert("Failed to renounce claim: "+(e.message||"Unknown error"))}}function renderClaimCard(e){const{claim:n,avatar:t}=e;return t?`\n    <div class="bg-gray-800 p-4 rounded-lg">\n      <div class="flex items-center gap-3">\n        <img \n          src="${t.thumbnailUrl||t.imageUrl||""}" \n          alt="${t.name||"Avatar"}" \n          class="w-16 h-16 object-cover rounded-full"\n          onerror="this.onerror=null; this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'100\\' height=\\'100\\' viewBox=\\'0 0 100 100\\'%3E%3Crect fill=\\'%23333\\' width=\\'100\\' height=\\'100\\'/%3E%3Ctext fill=\\'%23FFF\\' x=\\'50\\' y=\\'50\\' font-size=\\'50\\' text-anchor=\\'middle\\' dominant-baseline=\\'middle\\'%3E${(t.name||"A").charAt(0).toUpperCase()}%3C/text%3E%3C/svg%3E';"\n        >\n        \n        <div class="flex-1 min-w-0">\n          <h3 class="font-bold truncate">${t.name||"Unknown"}</h3>\n          <div class="text-xs text-gray-400">\n            Claimed: ${new Date(n.createdAt).toLocaleDateString()}\n          </div>\n          <div class="mt-1 flex items-center">\n            <span class="px-2 py-0.5 text-xs rounded ${getStatusBadgeColor(n.status)}">\n              ${formatClaimStatus(n.status)}\n            </span>\n          </div>\n        </div>\n        \n        ${t.emoji?`<div class="text-2xl">${t.emoji}</div>`:""}\n      </div>\n      \n      <div class="mt-4 flex justify-between items-center">\n        <button \n          onclick="viewAvatar('${t._id}')"\n          class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm"\n        >\n          View Details\n        </button>\n        \n        ${"minted"===n.status?`\n          <a \n            href="${getMarketplaceUrl(n)}" \n            target="_blank"\n            class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-sm"\n          >\n            View on Marketplace\n          </a>\n        `:"pending"===n.status?'\n          <div class="text-xs text-gray-400">\n            Pending mint\n          </div>\n        ':""}\n      </div>\n    </div>\n  `:`\n      <div class="bg-gray-800 p-4 rounded-lg">\n        <p class="text-center text-gray-400">Avatar data not available</p>\n        <p class="text-xs text-center text-gray-500 mt-2">ID: ${n.avatarId}</p>\n      </div>\n    `}function renderClaimForm(){const e=document.getElementById("claim-form-container");e?allowance.allowed?(e.classList.remove("hidden"),e.innerHTML='\n    <div class="bg-gray-800 p-6 rounded-lg">\n      <h2 class="text-xl font-bold mb-4">Claim a New Avatar</h2>\n      \n      <div class="mb-4">\n        <label for="avatar-id" class="block text-sm font-medium text-gray-300">Avatar ID</label>\n        <input \n          type="text" \n          id="avatar-id" \n          placeholder="Enter Avatar ID"\n          class="mt-1 block w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"\n        >\n      </div>\n      \n      <div class="mb-4">\n        <button\n          onclick="findAvatar()"\n          class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded"\n        >\n          Find Avatar\n        </button>\n      </div>\n      \n      <div id="avatar-preview" class="hidden bg-gray-700 p-4 rounded-lg mb-4">\n        \x3c!-- Avatar preview will be inserted here --\x3e\n      </div>\n      \n      <button\n        onclick="claimAvatar()"\n        id="claim-btn"\n        class="w-full px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded font-bold disabled:bg-gray-600 disabled:cursor-not-allowed"\n        disabled\n      >\n        Sign & Claim Avatar\n      </button>\n    </div>\n  '):e.classList.add("hidden"):console.error("Claim form container not found when rendering form")}function formatClaimStatus(e){switch(e){case"pending":return"Pending";case"minted":return"Minted";case"failed":return"Failed";default:return"Unknown"}}function getStatusBadgeColor(e){switch(e){case"pending":return"bg-yellow-600";case"minted":return"bg-green-600";case"failed":return"bg-red-600";default:return"bg-gray-600"}}function getMarketplaceUrl(e){return`https://testnets.opensea.io/assets/base-sepolia/${e.contractAddress||"0x0000"}/${e.tokenId||"0"}`}async function findAvatar(){const e=document.getElementById("avatar-id").value.trim(),n=document.getElementById("avatar-preview"),t=document.getElementById("claim-btn");if(e){n.innerHTML='\n    <div class="text-center py-4">\n      <div class="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-primary-600 mx-auto"></div>\n      <p class="mt-2 text-xs text-gray-400">Looking for avatar...</p>\n    </div>\n  ',n.classList.remove("hidden"),t.disabled=!0;try{const a=await fetch(`/api/claims/status/${e}`),r=await a.json();if(!a.ok)throw new Error(r.error||"Failed to check claim status");if(r.claimed)return void(n.innerHTML=`\n        <div class="text-center py-4 text-red-500">\n          This avatar has already been claimed by \n          <span class="cursor-pointer text-blue-500" onclick="copyToClipboard('${r.claimedBy}')">\n            ${shortenAddress(r.claimedBy)}\n          </span>.\n        </div>\n      `);const i=await fetch(`/api/avatars/${e}`),l=await i.json();if(!i.ok)throw new Error(l.error||"Failed to fetch avatar");window.selectedAvatar=l,n.innerHTML=`\n      <div class="flex items-center gap-3">\n        <img \n          src="${l.thumbnailUrl||l.imageUrl||""}" \n          alt="${l.name}" \n          class="w-16 h-16 object-cover rounded-full"\n          onerror="this.onerror=null; this.src='data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'100\\' height=\\'100\\' viewBox=\\'0 0 100 100\\'%3E%3Crect fill=\\'%23333\\' width=\\'100\\' height=\\'100\\'/%3E%3Ctext fill=\\'%23FFF\\' x=\\'50\\' y=\\'50\\' font-size=\\'50\\' text-anchor=\\'middle\\' dominant-baseline=\\'middle\\'%3E${(l.name||"A").charAt(0).toUpperCase()}%3C/text%3E%3C/svg%3E';"\n        >\n        <div class="flex-1 min-w-0">\n          <h3 class="font-bold truncate">${l.name||"Unknown"}</h3>\n          <div class="text-xs text-gray-400">\n            Created: ${new Date(l.createdAt).toLocaleDateString()}\n          </div>\n        </div>\n      </div>\n    `,t.disabled=!1}catch(e){console.error("Find avatar error:",e),n.innerHTML=`\n      <div class="text-center py-4 text-red-500">\n        Failed to find avatar: ${e.message}\n      </div>\n    `}}else showAlert("Please enter an Avatar ID")}function uint8ArrayToHexString(e){return Array.from(e).map((e=>e.toString(16).padStart(2,"0"))).join("")}async function claimAvatar(){const e=document.getElementById("claim-btn");if(e){e.disabled=!0;try{const n=window.selectedAvatar;if(!n||!n._id)return showAlert("Please select an avatar first"),void(e.disabled=!1);if(!state.wallet)return showAlert("Wallet not connected. Please connect your wallet."),void(e.disabled=!1);const t=`I am claiming avatar ${n._id}`,a=(new TextEncoder).encode(t),r=uint8ArrayToHexString((await window.phantom.solana.signMessage(a,"utf8")).signature),i=await fetch("/api/claims/claim",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({avatarId:n._id,walletAddress:state.wallet.publicKey,signature:r,message:t})}),l=await i.json();if(!i.ok){if("Avatar already claimed"===l.error)showAlert(`Avatar already claimed by ${shortenAddress(l.claimedBy)}`);else{if("Invalid signature"!==l.error)throw new Error(l.error||"Failed to claim avatar");showAlert("Invalid signature. Please try again.")}return void(e.disabled=!1)}await loadUserClaims(),showAlert("Avatar claimed successfully!")}catch(e){console.error("Claim process error:",e),showAlert("Failed to claim avatar: "+(e.message||"Unknown error"))}finally{e.disabled=!1}}else console.error("Claim button not found")}function showAlert(e){console.log("Alert:",e);const n=document.getElementById("toast-container");if(n){const t=document.createElement("div");return t.className="toast bg-gray-800 text-white p-3 rounded shadow",t.textContent=e,n.appendChild(t),void setTimeout((()=>{t.parentNode&&t.remove()}),3e3)}alert(e)}function shortenAddress(e){return"string"!=typeof e?"":e.slice(0,6)+"..."+e.slice(-4)}function copyToClipboard(e){navigator.clipboard.writeText(e).then((()=>{showAlert("Address copied to clipboard")})).catch((e=>{console.error("Failed to copy text: ",e)}))}