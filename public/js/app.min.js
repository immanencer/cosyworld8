"use strict";

const {
  useState,
  useEffect
} = React;
const {
  createRoot
} = ReactDOM;

// Main App Component
function App() {
  const [avatars, setAvatars] = useState([]);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    fetch("/api/leaderboard").then(res => res.json()).then(data => {
      setAvatars(data.avatars || []);
      setLoading(false);
    }).catch(error => {
      console.error("Error fetching leaderboard:", error);
      setLoading(false);
    });
  }, []);
  if (loading) {
    return /*#__PURE__*/React.createElement("div", {
      className: "text-center py-4"
    }, /*#__PURE__*/React.createElement("div", {
      className: "animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto"
    }));
  }
  return /*#__PURE__*/React.createElement("div", {
    className: "container mx-auto px-4 py-8"
  }, /*#__PURE__*/React.createElement("h1", {
    className: "text-4xl font-bold mb-8 text-center"
  }, "Avatar Dashboard"), /*#__PURE__*/React.createElement("div", {
    className: "grid gap-4 grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6"
  }, avatars.map(avatar => /*#__PURE__*/React.createElement("div", {
    key: avatar._id,
    className: "bg-gray-800 p-4 rounded-lg"
  }, /*#__PURE__*/React.createElement("img", {
    src: avatar.thumbnailUrl || avatar.imageUrl,
    alt: avatar.name,
    className: "w-full h-48 object-cover rounded-lg mb-2"
  }), /*#__PURE__*/React.createElement("h3", {
    className: "text-lg font-semibold"
  }, avatar.name)))));
}
const rootElement = document.getElementById("root");
if (rootElement) {
  const root = createRoot(rootElement);
  root.render(/*#__PURE__*/React.createElement(React.StrictMode, null, /*#__PURE__*/React.createElement(App, null)));
}
