"use strict";

const {
  useState
} = React;
const {
  createRoot
} = ReactDOM;
const WalletButton = window.WalletButton;
function TabButton(_ref) {
  let {
    label,
    isActive,
    onClick
  } = _ref;
  return /*#__PURE__*/React.createElement("button", {
    onClick: onClick,
    className: "px-4 py-2 rounded-lg ".concat(isActive ? "bg-blue-600" : "bg-gray-700")
  }, label);
}
function App() {
  const [wallet, setWallet] = useState(null);
  const [activeTab, setActiveTab] = useState("owned");
  const handleWalletChange = newWallet => {
    setWallet(newWallet);
  };
  const renderTabContent = () => {
    switch (activeTab) {
      case "owned":
        return /*#__PURE__*/React.createElement("div", {
          className: "text-center py-12"
        }, "Your owned avatars will appear here");
      case "gallery":
        return /*#__PURE__*/React.createElement("div", {
          className: "text-center py-12"
        }, "Gallery content coming soon");
      case "leaderboard":
        {
          const [leaderboard, setLeaderboard] = useState([]);
          const [page, setPage] = useState(1);
          const [loading, setLoading] = useState(false);
          const [hasMore, setHasMore] = useState(true);
          useEffect(() => {
            const fetchLeaderboard = async () => {
              setLoading(true);
              try {
                const response = await fetch("/api/leaderboard?page=".concat(page, "&limit=12"));
                const data = await response.json();
                setLeaderboard(prev => [...prev, ...data.avatars]);
                setHasMore(data.avatars.length === 12);
              } catch (error) {
                console.error('Error fetching leaderboard:', error);
              } finally {
                setLoading(false);
              }
            };
            fetchLeaderboard();
          }, [page]);
          return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
            className: "grid gap-4 grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6"
          }, leaderboard.map(avatar => /*#__PURE__*/React.createElement("div", {
            key: avatar._id,
            className: "bg-gray-800 p-4 rounded-lg"
          }, /*#__PURE__*/React.createElement("img", {
            src: avatar.thumbnailUrl || avatar.imageUrl,
            alt: avatar.name,
            className: "w-full h-48 object-cover rounded-lg mb-2"
          }), /*#__PURE__*/React.createElement("h3", {
            className: "text-lg font-semibold"
          }, avatar.name), /*#__PURE__*/React.createElement("p", {
            className: "text-sm text-gray-400"
          }, "Score: ", avatar.score)))), hasMore && !loading && /*#__PURE__*/React.createElement("div", {
            className: "text-center mt-8"
          }, /*#__PURE__*/React.createElement("button", {
            onClick: () => setPage(p => p + 1),
            className: "bg-gray-700 px-6 py-2 rounded-lg hover:bg-gray-600 transition-colors"
          }, "Load More")), loading && /*#__PURE__*/React.createElement("div", {
            className: "text-center mt-8"
          }, /*#__PURE__*/React.createElement("p", null, "Loading...")));
        }
      case "tribes":
        return /*#__PURE__*/React.createElement("div", {
          className: "text-center py-12"
        }, "Tribes content coming soon");
      default:
        return null;
    }
  };
  if (!wallet && activeTab === "owned") {
    return /*#__PURE__*/React.createElement("div", {
      className: "min-h-screen flex flex-col items-center justify-center p-4"
    }, /*#__PURE__*/React.createElement("h1", {
      className: "text-4xl font-bold mb-8 text-center"
    }, "Welcome to Avatar Dashboard"), /*#__PURE__*/React.createElement("p", {
      className: "mb-8 text-gray-400 text-center"
    }, "Connect your wallet to view your avatars"), /*#__PURE__*/React.createElement(WalletButton, {
      onWalletChange: handleWalletChange
    }));
  }
  return /*#__PURE__*/React.createElement("div", {
    className: "container mx-auto px-4 py-8"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex justify-between items-center mb-8"
  }, /*#__PURE__*/React.createElement("h1", {
    className: "text-4xl font-bold"
  }, "Avatar Dashboard"), /*#__PURE__*/React.createElement(WalletButton, {
    onWalletChange: handleWalletChange
  })), /*#__PURE__*/React.createElement("div", {
    className: "flex gap-4 mb-8"
  }, ["owned", "gallery", "leaderboard", "tribes"].map(tab => /*#__PURE__*/React.createElement(TabButton, {
    key: tab,
    label: tab.charAt(0).toUpperCase() + tab.slice(1),
    isActive: activeTab === tab,
    onClick: () => setActiveTab(tab)
  }))), renderTabContent());
}
const rootElement = document.getElementById("root");
if (rootElement) {
  const root = createRoot(rootElement);
  root.render(/*#__PURE__*/React.createElement(React.StrictMode, null, /*#__PURE__*/React.createElement(App, null)));
}
