"use strict";

const {
  useState,
  useEffect
} = React;
const {
  createRoot
} = ReactDOM;
const WalletButton = window.WalletButton;
function App() {
  const [avatars, setAvatars] = useState([]);
  const [loading, setLoading] = useState(false);
  const [wallet, setWallet] = useState(null);
  const [activeTab, setActiveTab] = useState('owned');
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const handleWalletChange = newWallet => {
    setWallet(newWallet);
    if (newWallet) {
      setLoading(true);
      fetch("/api/avatars/owned/".concat(newWallet.publicKey.toString())).then(res => res.json()).then(data => {
        setAvatars(data || []);
        setLoading(false);
      }).catch(error => {
        console.error("Error fetching owned avatars:", error);
        setLoading(false);
      });
    } else {
      setAvatars([]);
    }
  };
  const handleClaimAvatar = async () => {
    if (!wallet) return;
    setLoading(true);
    try {
      const response = await fetch('/api/avatars/claim', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          walletAddress: wallet.publicKey.toString()
        })
      });
      const data = await response.json();
      if (data.success) {
        setAvatars(prev => [...prev, data.avatar]);
      }
    } catch (error) {
      console.error("Error claiming avatar:", error);
    } finally {
      setLoading(false);
    }
  };
  const loadMoreAvatars = async () => {
    if (loading || !hasMore) return;
    setLoading(true);
    try {
      var _data$avatars;
      const endpoint = {
        owned: "/api/avatars/owned/".concat(wallet.publicKey.toString(), "?page=").concat(page),
        gallery: "/api/avatars/gallery?page=".concat(page),
        leaderboard: "/api/avatars/leaderboard?page=".concat(page),
        tribes: "/api/tribes?page=".concat(page)
      }[activeTab];
      const response = await fetch(endpoint);
      const data = await response.json();
      if (((_data$avatars = data.avatars) === null || _data$avatars === void 0 ? void 0 : _data$avatars.length) === 0) {
        setHasMore(false);
      } else {
        setAvatars(prev => [...prev, ...data.avatars]);
        setPage(prev => prev + 1);
      }
    } catch (error) {
      console.error("Error loading more avatars:", error);
    } finally {
      setLoading(false);
    }
  };
  useEffect(() => {
    setPage(1);
    setHasMore(true);
    setAvatars([]);
    if (activeTab !== 'owned' || wallet) {
      loadMoreAvatars();
    }
  }, [activeTab]);
  if (!wallet && activeTab === 'owned') {
    return /*#__PURE__*/React.createElement("div", {
      className: "min-h-screen flex flex-col items-center justify-center p-4"
    }, /*#__PURE__*/React.createElement("h1", {
      className: "text-4xl font-bold mb-8 text-center"
    }, "Welcome to Avatar Dashboard"), /*#__PURE__*/React.createElement("p", {
      className: "mb-8 text-gray-400 text-center"
    }, "Connect your wallet to view your avatars"), /*#__PURE__*/React.createElement(WalletButton, {
      onWalletChange: handleWalletChange
    }));
  }
  return /*#__PURE__*/React.createElement("div", {
    className: "container mx-auto px-4 py-8"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex justify-between items-center mb-8"
  }, /*#__PURE__*/React.createElement("h1", {
    className: "text-4xl font-bold"
  }, "Avatar Dashboard"), /*#__PURE__*/React.createElement(WalletButton, {
    onWalletChange: handleWalletChange
  })), /*#__PURE__*/React.createElement("div", {
    className: "flex gap-4 mb-8"
  }, /*#__PURE__*/React.createElement("button", {
    onClick: () => setActiveTab('owned'),
    className: "px-4 py-2 rounded-lg ".concat(activeTab === 'owned' ? 'bg-blue-600' : 'bg-gray-700')
  }, "My Avatars"), /*#__PURE__*/React.createElement("button", {
    onClick: () => setActiveTab('gallery'),
    className: "px-4 py-2 rounded-lg ".concat(activeTab === 'gallery' ? 'bg-blue-600' : 'bg-gray-700')
  }, "Gallery"), /*#__PURE__*/React.createElement("button", {
    onClick: () => setActiveTab('leaderboard'),
    className: "px-4 py-2 rounded-lg ".concat(activeTab === 'leaderboard' ? 'bg-blue-600' : 'bg-gray-700')
  }, "Leaderboard"), /*#__PURE__*/React.createElement("button", {
    onClick: () => setActiveTab('tribes'),
    className: "px-4 py-2 rounded-lg ".concat(activeTab === 'tribes' ? 'bg-blue-600' : 'bg-gray-700')
  }, "Tribes")), activeTab === 'owned' && avatars.length === 0 && !loading && /*#__PURE__*/React.createElement("div", {
    className: "text-center py-12"
  }, /*#__PURE__*/React.createElement("p", {
    className: "text-gray-400 mb-4"
  }, "You don't own any avatars yet"), /*#__PURE__*/React.createElement("button", {
    onClick: handleClaimAvatar,
    className: "bg-blue-600 px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
  }, "Claim Free Avatar")), /*#__PURE__*/React.createElement("div", {
    className: "grid gap-4 grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6"
  }, avatars.map(avatar => /*#__PURE__*/React.createElement("div", {
    key: avatar._id,
    className: "bg-gray-800 p-4 rounded-lg"
  }, /*#__PURE__*/React.createElement("img", {
    src: avatar.thumbnailUrl || avatar.imageUrl,
    alt: avatar.name,
    className: "w-full h-48 object-cover rounded-lg mb-2"
  }), /*#__PURE__*/React.createElement("h3", {
    className: "text-lg font-semibold"
  }, avatar.name), activeTab === 'leaderboard' && /*#__PURE__*/React.createElement("p", {
    className: "text-sm text-gray-400"
  }, "Score: ", avatar.score || 0)))), hasMore && /*#__PURE__*/React.createElement("div", {
    className: "text-center mt-8"
  }, /*#__PURE__*/React.createElement("button", {
    onClick: loadMoreAvatars,
    className: "bg-gray-700 px-6 py-2 rounded-lg hover:bg-gray-600 transition-colors",
    disabled: loading
  }, loading ? 'Loading...' : 'Load More')));
}
const rootElement = document.getElementById("root");
if (rootElement) {
  const root = createRoot(rootElement);
  root.render(/*#__PURE__*/React.createElement(React.StrictMode, null, /*#__PURE__*/React.createElement(App, null)));
}
