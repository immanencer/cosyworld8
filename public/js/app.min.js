"use strict";

var _ProgressRing = require("./components/ui/ProgressRing.js");
var _TierBadge = require("./components/ui/TierBadge.js");
var _ActivityFeed = require("./components/ui/ActivityFeed.js");
var _AncestryChain = require("./components/ui/AncestryChain.js");
var _StatsDisplay = require("./components/ui/StatsDisplay.js");
var _XAuthButton = require("./components/ui/XAuthButton.js");
var _ViewToggle = require("./components/ui/ViewToggle.js");
var _WalletButton = require("./components/ui/WalletButton.js");
var _BurnTokenButton = require("./components/ui/BurnTokenButton.js");
var _AvatarCard = require("./components/ui/AvatarCard.js");
var _AvatarSearch = require("./components/ui/AvatarSearch.js");
var _AvatarDetailModal = require("./components/ui/AvatarDetailModal.js");
var _CombatLog = require("./components/ui/CombatLog.js");
var _TribesView = require("./components/ui/TribesView.js");
var _MarkdownContent = require("./components/ui/MarkdownContent.js");
/**
 * Avatar Dashboard Architecture
 * 
 * Components:
 * - App: Main container component managing global state and routing
 * - LeaderboardView: Displays avatar rankings and stats
 * - TierFilter: Filters avatars by rarity tier
 * - AvatarCard: Individual avatar display component
 * 
 * Data Flow:
 * 1. App fetches initial data and maintains global state
 * 2. Data is passed down to child components via props
 * 3. Child components communicate up through callbacks
 * 
 * Authentication:
 * - WalletButton handles web3 wallet connections
 * - Authentication state stored at App level
 */

const {
  useState,
  useEffect,
  useCallback
} = React;
const {
  createRoot
} = ReactDOM;

// UI Components (imported as ES modules)

// Utilities
const utils = {
  // Add utility functions here
};

// Determine model rarity
const getModelRarity = modelName => {
  const modelRarities = {
    "meta-llama/llama-3.2-1b-instruct": "common",
    "meta-llama/llama-3.2-3b-instruct": "common",
    "eva-unit-01/eva-qwen-2.5-72b": "rare",
    "openai/gpt-4o": "legendary",
    "meta-llama/llama-3.1-405b-instruct": "legendary",
    "anthropic/claude-3-opus:beta": "legendary",
    "anthropic/claude-3.5-sonnet:beta": "legendary",
    "anthropic/claude-3.5-haiku:beta": "uncommon",
    "neversleep/llama-3.1-lumimaid-70b": "rare",
    "nvidia/llama-3.1-nemotron-70b-instruct": "rare",
    "meta-llama/llama-3.1-70b-instruct": "uncommon",
    "pygmalionai/mythalion-13b": "uncommon",
    "mistralai/mistral-large-2411": "uncommon",
    "qwen/qwq-32b-preview": "uncommon",
    "gryphe/mythomax-l2-13b": "common",
    "google/gemini-flash-1.5-8b": "common",
    "x-ai/grok-beta": "legendary"
  };
  return modelRarities[modelName] || "common";
};

// Map rarity to tier
const rarityToTier = {
  legendary: "S",
  rare: "A",
  uncommon: "B",
  common: "C"
};

// Get tier from model
const getTierFromModel = model => {
  if (!model) return "U";
  const rarity = getModelRarity(model);
  return rarityToTier[rarity] || "U";
};

// Leaderboard View Component
const LeaderboardView = React.memo(() => {
  const [leaderboard, setLeaderboard] = useState([]);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    fetch("/api/leaderboard").then(res => res.json()).then(data => {
      setLeaderboard(data.avatars || []);
      setLoading(false);
    }).catch(error => {
      console.error("Error fetching leaderboard:", error);
      setLoading(false);
    });
  }, []);
  if (loading) {
    return /*#__PURE__*/React.createElement("div", {
      className: "text-center py-4"
    }, /*#__PURE__*/React.createElement("div", {
      className: "animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto"
    }));
  }
  return /*#__PURE__*/React.createElement("div", {
    className: "max-w-4xl mx-auto"
  }, /*#__PURE__*/React.createElement("h1", {
    className: "text-4xl font-bold mb-8 text-center"
  }, "Leaderboard"), /*#__PURE__*/React.createElement("table", {
    className: "w-full bg-gray-800 rounded-lg overflow-hidden"
  }, /*#__PURE__*/React.createElement("thead", null, /*#__PURE__*/React.createElement("tr", {
    className: "bg-gray-700"
  }, /*#__PURE__*/React.createElement("th", {
    className: "px-6 py-3 text-left"
  }, "Rank"), /*#__PURE__*/React.createElement("th", {
    className: "px-6 py-3 text-left"
  }, "Avatar"), /*#__PURE__*/React.createElement("th", {
    className: "px-6 py-3 text-left"
  }, "Name"), /*#__PURE__*/React.createElement("th", {
    className: "px-6 py-3 text-right"
  }, "Score"))), /*#__PURE__*/React.createElement("tbody", null, leaderboard.map((avatar, index) => /*#__PURE__*/React.createElement("tr", {
    key: avatar._id,
    className: "border-t border-gray-700 hover:bg-gray-700"
  }, /*#__PURE__*/React.createElement("td", {
    className: "px-6 py-4"
  }, index + 1), /*#__PURE__*/React.createElement("td", {
    className: "px-6 py-4"
  }, /*#__PURE__*/React.createElement("img", {
    src: avatar.thumbnailUrl || avatar.imageUrl,
    alt: avatar.name,
    className: "w-10 h-10 rounded-full"
  })), /*#__PURE__*/React.createElement("td", {
    className: "px-6 py-4"
  }, avatar.name), /*#__PURE__*/React.createElement("td", {
    className: "px-6 py-4 text-right"
  }, avatar.score || 0))))));
});

// Tier Filter Component
const TierFilter = React.memo(_ref => {
  let {
    selectedTier,
    onTierChange
  } = _ref;
  const tiers = ["All", "S", "A", "B", "C", "U"];
  const colors = {
    S: "bg-purple-600",
    A: "bg-blue-600",
    B: "bg-green-600",
    C: "bg-yellow-600",
    U: "bg-gray-600"
  };
  return /*#__PURE__*/React.createElement("div", {
    className: "flex gap-2 justify-center mb-6"
  }, tiers.map(tier => /*#__PURE__*/React.createElement("button", {
    key: tier,
    className: "px-3 py-1 rounded ".concat(selectedTier === tier ? tier === "All" ? "bg-white text-gray-900" : "".concat(colors[tier], " text-white") : "bg-gray-700 text-gray-300"),
    onClick: () => onTierChange(tier)
  }, tier)));
});

// Main App Component
function App() {
  const [avatars, setAvatars] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [lastMessageCount, setLastMessageCount] = useState(null);
  const [lastId, setLastId] = useState(null);
  const [selectedTier, setSelectedTier] = useState("All");
  const [currentView, setCurrentView] = useState("leaderboard");
  const [modalAvatar, setModalAvatar] = useState(null);
  const [wallet, setWallet] = useState(null);
  const loadAvatars = useCallback(async function () {
    let isInitial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    if (loading || !hasMore && !isInitial) return;
    setLoading(true);
    try {
      const url = new URL("/api/leaderboard", window.location.origin);
      url.searchParams.set("limit", "24");
      if (selectedTier !== "All") {
        url.searchParams.set("tier", selectedTier);
      }
      if (!isInitial && lastMessageCount !== null && lastId) {
        url.searchParams.set("lastMessageCount", lastMessageCount);
        url.searchParams.set("lastId", lastId);
      }
      const res = await fetch(url);
      if (!res.ok) {
        throw new Error("HTTP error! status: ".concat(res.status));
      }
      const data = await res.json();
      if (isInitial) {
        setAvatars(data.avatars || []);
      } else {
        setAvatars(prev => [...prev, ...(data.avatars || [])]);
      }
      setHasMore(data.hasMore);
      setLastMessageCount(data.lastMessageCount);
      setLastId(data.lastId);
    } catch (error) {
      console.error("Error loading avatars:", error);
      setHasMore(false);
    } finally {
      setLoading(false);
    }
  }, [loading, hasMore, selectedTier, lastMessageCount, lastId]);
  useEffect(() => {
    loadAvatars(true);
  }, [loadAvatars]);
  useEffect(() => {
    const handleScroll = () => {
      if (window.innerHeight + window.scrollY >= document.documentElement.scrollHeight - 1000 && !loading && hasMore) {
        loadAvatars();
      }
    };
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, [loading, hasMore, loadAvatars]);
  useEffect(() => {
    setLastMessageCount(null);
    setLastId(null);
    setHasMore(true);
    setAvatars([]);
    loadAvatars(true);
  }, [selectedTier, loadAvatars]);

  // Handler for avatar selection from any view
  const handleAvatarSelect = useCallback(avatar => {
    // Fetch full avatar details if needed
    fetch("/api/avatars/".concat(avatar._id)).then(res => res.json()).then(data => setModalAvatar(data)).catch(err => {
      console.error("Error fetching avatar details:", err);
      setModalAvatar(avatar); // Fallback to basic avatar data
    });
  }, []);
  return /*#__PURE__*/React.createElement("div", {
    className: "container mx-auto px-4 py-8"
  }, /*#__PURE__*/React.createElement(_WalletButton.WalletButton, {
    onWalletChange: setWallet
  }), /*#__PURE__*/React.createElement("h1", {
    className: "text-4xl font-bold mb-8 text-center"
  }, "Avatar Dashboard"), /*#__PURE__*/React.createElement(_ViewToggle.ViewToggle, {
    currentView: currentView,
    onViewChange: setCurrentView
  }), currentView === "collection" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TierFilter, {
    selectedTier: selectedTier,
    onTierChange: setSelectedTier
  }), /*#__PURE__*/React.createElement(_AvatarSearch.AvatarSearch, {
    onSelect: handleAvatarSelect
  }), /*#__PURE__*/React.createElement("div", {
    className: "grid gap-4 grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 mt-4"
  }, avatars.map(avatar => /*#__PURE__*/React.createElement(_AvatarCard.AvatarCard, {
    key: avatar._id,
    avatar: avatar,
    onSelect: handleAvatarSelect
  }))), loading && /*#__PURE__*/React.createElement("div", {
    className: "text-center py-4"
  }, /*#__PURE__*/React.createElement("div", {
    className: "animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto"
  })), modalAvatar && /*#__PURE__*/React.createElement(_AvatarDetailModal.AvatarDetailModal, {
    avatar: modalAvatar,
    onClose: () => setModalAvatar(null),
    wallet: wallet
  })) : currentView === "leaderboard" ? /*#__PURE__*/React.createElement(LeaderboardView, null) : currentView === "combat" ? /*#__PURE__*/React.createElement(_CombatLog.CombatLog, {
    onAvatarSelect: handleAvatarSelect
  }) : currentView === "tribes" ? /*#__PURE__*/React.createElement(_TribesView.TribesView, {
    onAvatarSelect: handleAvatarSelect
  }) : null, wallet && /*#__PURE__*/React.createElement(_BurnTokenButton.BurnTokenButton, {
    wallet: wallet,
    onSuccess: () => {
      /* Handle success */
    }
  }));
}
const rootElement = document.getElementById("root");
if (rootElement) {
  const root = createRoot(rootElement);
  root.render(/*#__PURE__*/React.createElement(React.StrictMode, null, /*#__PURE__*/React.createElement(App, null)));
}
