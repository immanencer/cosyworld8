"use strict";

const {
  useState,
  useEffect
} = React;
const {
  createRoot
} = ReactDOM;
const {
  TierBadge
} = window.components;
const {
  getTierFromModel,
  MarkdownContent
} = window.utils;
const {
  StatsDisplay,
  ActivityFeed
} = window.components;
const WalletButton = window.WalletButton;
function TabButton(_ref) {
  let {
    label,
    isActive,
    onClick
  } = _ref;
  return /*#__PURE__*/React.createElement("button", {
    onClick: onClick,
    className: "px-4 py-2 rounded-lg ".concat(isActive ? "bg-blue-600" : "bg-gray-700")
  }, label);
}

// Gallery View Component
function GalleryView(_ref2) {
  let {
    onSelectAvatar
  } = _ref2;
  const [avatars, setAvatars] = useState([]);
  const [loading, setLoading] = useState(false);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  useEffect(() => {
    if (page === 1) {
      setAvatars([]);
    }
    fetchGallery();
  }, [page]);
  const fetchGallery = async () => {
    setLoading(true);
    try {
      const response = await fetch("/api/avatars/gallery?page=".concat(page, "&limit=12"));
      const data = await response.json();
      setAvatars(prev => [...prev, ...data.avatars]);
      setHasMore(data.avatars.length === 12);
    } catch (error) {
      console.error('Error fetching gallery:', error);
    } finally {
      setLoading(false);
    }
  };
  return /*#__PURE__*/React.createElement("div", {
    className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
  }, avatars.map(avatar => /*#__PURE__*/React.createElement("div", {
    key: avatar._id,
    className: "bg-gray-800 rounded-lg p-4 cursor-pointer hover:bg-gray-700 transition",
    onClick: () => onSelectAvatar(avatar)
  }, /*#__PURE__*/React.createElement("img", {
    src: avatar.thumbnailUrl || avatar.imageUrl,
    alt: avatar.name,
    className: "w-full aspect-square object-cover rounded-lg mb-4"
  }), /*#__PURE__*/React.createElement("h3", {
    className: "text-lg font-semibold"
  }, avatar.name), avatar.model && /*#__PURE__*/React.createElement("p", {
    className: "text-sm text-gray-400"
  }, avatar.model))), hasMore && /*#__PURE__*/React.createElement("div", {
    ref: node => {
      if (!node) return;
      const observer = new IntersectionObserver(entries => {
        if (entries[0].isIntersecting && !loading) {
          setPage(p => p + 1);
        }
      });
      observer.observe(node);
      if (node._observer) {
        node._observer.disconnect();
      }
      node._observer = observer;
    },
    className: "h-10"
  }));
}

// Owned Avatars Component
function OwnedAvatars(_ref3) {
  let {
    wallet,
    onSelectAvatar
  } = _ref3;
  const [avatars, setAvatars] = useState([]);
  const [loading, setLoading] = useState(false);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  useEffect(() => {
    if (!(wallet !== null && wallet !== void 0 && wallet.publicKey)) return;
    fetchOwnedAvatars();
  }, [wallet === null || wallet === void 0 ? void 0 : wallet.publicKey, page]);
  const fetchOwnedAvatars = async () => {
    setLoading(true);
    try {
      const response = await fetch("/api/avatars/owned/".concat(wallet.publicKey, "?page=").concat(page, "&limit=12"));
      const data = await response.json();
      setAvatars(prev => [...prev, ...data.avatars]);
      setHasMore(data.hasMore);
    } catch (error) {
      console.error('Error fetching owned avatars:', error);
    } finally {
      setLoading(false);
    }
  };
  return /*#__PURE__*/React.createElement("div", {
    className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
  }, avatars.map(avatar => /*#__PURE__*/React.createElement("div", {
    key: avatar._id,
    className: "bg-gray-800 rounded-lg p-4 cursor-pointer hover:bg-gray-700 transition",
    onClick: () => onSelectAvatar(avatar)
  }, /*#__PURE__*/React.createElement("img", {
    src: avatar.thumbnailUrl || avatar.imageUrl,
    alt: avatar.name,
    className: "w-full aspect-square object-cover rounded-lg mb-4"
  }), /*#__PURE__*/React.createElement("h3", {
    className: "text-lg font-semibold"
  }, avatar.name), avatar.model && /*#__PURE__*/React.createElement("p", {
    className: "text-sm text-gray-400"
  }, avatar.model))), hasMore && /*#__PURE__*/React.createElement("div", {
    ref: node => {
      if (!node) return;
      const observer = new IntersectionObserver(entries => {
        if (entries[0].isIntersecting && !loading) {
          setPage(p => p + 1);
        }
      });
      observer.observe(node);
      if (node._observer) {
        node._observer.disconnect();
      }
      node._observer = observer;
    },
    className: "h-10"
  }));
}
function AvatarModal(_ref4) {
  let {
    isOpen,
    onClose,
    avatar,
    wallet
  } = _ref4;
  const [activityData, setActivityData] = useState({
    messages: [],
    memories: [],
    narratives: [],
    location: null,
    dungeonStats: (avatar === null || avatar === void 0 ? void 0 : avatar.stats) || {
      attack: 0,
      defense: 0,
      hp: 0
    },
    dungeonActions: []
  });
  useEffect(() => {
    if (avatar !== null && avatar !== void 0 && avatar._id && isOpen) {
      Promise.all([fetch("/api/avatars/".concat(avatar._id, "/narratives")).then(r => r.json()), fetch("/api/avatars/".concat(avatar._id, "/memories")).then(r => r.json()), fetch("/api/avatars/".concat(avatar._id, "/location")).then(r => r.json()), fetch("/api/avatars/".concat(avatar._id, "/actions")).then(r => r.json())]).then(_ref5 => {
        let [narrativeData, memoryData, locationData, actionsData] = _ref5;
        setActivityData({
          messages: (narrativeData === null || narrativeData === void 0 ? void 0 : narrativeData.recentMessages) || [],
          memories: (memoryData === null || memoryData === void 0 ? void 0 : memoryData.memories) || [],
          narratives: (narrativeData === null || narrativeData === void 0 ? void 0 : narrativeData.narratives) || [],
          location: locationData === null || locationData === void 0 ? void 0 : locationData.location,
          dungeonStats: (avatar === null || avatar === void 0 ? void 0 : avatar.stats) || (narrativeData === null || narrativeData === void 0 ? void 0 : narrativeData.dungeonStats),
          dungeonActions: (actionsData === null || actionsData === void 0 ? void 0 : actionsData.actions) || []
        });
      }).catch(error => console.error("Error fetching activity data:", error));
    }
  }, [avatar === null || avatar === void 0 ? void 0 : avatar._id, isOpen]);
  if (!isOpen || !avatar) return null;
  const tier = getTierFromModel(avatar === null || avatar === void 0 ? void 0 : avatar.model);
  return /*#__PURE__*/React.createElement("div", {
    className: "fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50"
  }, /*#__PURE__*/React.createElement("div", {
    className: "bg-gray-800 rounded-lg p-6 max-w-7xl w-full max-h-[90vh] overflow-y-auto relative"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex justify-between items-start mb-6"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex items-center gap-4"
  }, /*#__PURE__*/React.createElement("span", {
    className: "text-3xl"
  }, avatar.emoji), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h2", {
    className: "text-2xl font-bold text-white"
  }, avatar.name), /*#__PURE__*/React.createElement("div", {
    className: "flex items-center gap-2"
  }, /*#__PURE__*/React.createElement(TierBadge, {
    tier: tier
  }), avatar.model && /*#__PURE__*/React.createElement("span", {
    className: "text-sm text-gray-400"
  }, avatar.model)))), /*#__PURE__*/React.createElement("button", {
    onClick: onClose,
    className: "text-gray-400 hover:text-white text-2xl"
  }, "\xD7")), /*#__PURE__*/React.createElement("div", {
    className: "grid grid-cols-12 gap-6"
  }, /*#__PURE__*/React.createElement("div", {
    className: "col-span-4"
  }, /*#__PURE__*/React.createElement("div", {
    className: "relative aspect-square mb-4"
  }, /*#__PURE__*/React.createElement("img", {
    src: avatar.thumbnailUrl || avatar.imageUrl,
    alt: avatar.name,
    className: "w-full h-full object-cover rounded-lg"
  })), /*#__PURE__*/React.createElement("div", {
    className: "bg-gray-700 rounded-lg p-4 mb-4"
  }, /*#__PURE__*/React.createElement("h3", {
    className: "text-xl font-bold mb-2 text-white"
  }, "Stats"), /*#__PURE__*/React.createElement(StatsDisplay, {
    stats: activityData.dungeonStats,
    size: "large"
  }), wallet && /*#__PURE__*/React.createElement("div", {
    className: "mt-4"
  }, /*#__PURE__*/React.createElement(XAuthButton, {
    avatarId: avatar._id,
    walletAddress: wallet.publicKey.toString()
  }))), activityData.location && /*#__PURE__*/React.createElement("div", {
    className: "bg-gray-700 rounded-lg p-4"
  }, /*#__PURE__*/React.createElement("h3", {
    className: "text-xl font-bold mb-2 text-white"
  }, "Current Location"), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-300"
  }, activityData.location.name))), /*#__PURE__*/React.createElement("div", {
    className: "col-span-8 space-y-4"
  }, /*#__PURE__*/React.createElement("div", {
    className: "bg-gray-700 rounded-lg p-4"
  }, /*#__PURE__*/React.createElement("h3", {
    className: "text-xl font-bold mb-2 text-white"
  }, "Description"), /*#__PURE__*/React.createElement("div", {
    className: "prose prose-invert max-w-none"
  }, /*#__PURE__*/React.createElement(MarkdownContent, {
    content: avatar.description
  }))), avatar.personality && /*#__PURE__*/React.createElement("div", {
    className: "bg-gray-700 rounded-lg p-4"
  }, /*#__PURE__*/React.createElement("h3", {
    className: "text-xl font-bold mb-2 text-white"
  }, "Personality"), /*#__PURE__*/React.createElement("div", {
    className: "prose prose-invert max-w-none"
  }, /*#__PURE__*/React.createElement(MarkdownContent, {
    content: avatar.personality
  }))), /*#__PURE__*/React.createElement("div", {
    className: "bg-gray-700 rounded-lg p-4"
  }, /*#__PURE__*/React.createElement("h3", {
    className: "text-xl font-bold mb-2 text-white"
  }, "Recent Activity"), /*#__PURE__*/React.createElement(ActivityFeed, {
    messages: activityData.messages,
    memories: activityData.memories,
    narratives: activityData.narratives,
    dungeonActions: activityData.dungeonActions
  }))))));
}
function App() {
  const [wallet, setWallet] = useState(null);
  const [activeTab, setActiveTab] = useState("owned");
  const [leaderboard, setLeaderboard] = useState([]);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [selectedAvatar, setSelectedAvatar] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  useEffect(() => {
    if (activeTab === "leaderboard") {
      setLeaderboard([]);
      setPage(1);
    }
  }, [activeTab]);
  useEffect(() => {
    if (activeTab === "leaderboard") {
      const fetchLeaderboard = async () => {
        setLoading(true);
        try {
          const response = await fetch("/api/leaderboard?page=".concat(page, "&limit=12"));
          const data = await response.json();
          setLeaderboard(prev => {
            const newAvatars = data.avatars.filter(newAvatar => !prev.some(existingAvatar => existingAvatar._id === newAvatar._id));
            return [...prev, ...newAvatars];
          });
          setHasMore(data.avatars.length === 12);
        } catch (error) {
          console.error('Error fetching leaderboard:', error);
        } finally {
          setLoading(false);
        }
      };
      fetchLeaderboard();
    }
  }, [page, activeTab]);
  const handleWalletChange = newWallet => {
    setWallet(newWallet);
  };
  const renderTabContent = () => {
    switch (activeTab) {
      case "owned":
        return wallet ? /*#__PURE__*/React.createElement(OwnedAvatars, {
          wallet: wallet,
          onSelectAvatar: avatar => {
            setSelectedAvatar(avatar);
            setIsModalOpen(true);
          }
        }) : /*#__PURE__*/React.createElement("div", {
          className: "text-center py-12"
        }, "Connect your wallet to view owned avatars");
      case "gallery":
        return /*#__PURE__*/React.createElement(GalleryView, {
          onSelectAvatar: avatar => {
            setSelectedAvatar(avatar);
            setIsModalOpen(true);
          }
        });
      case "tribes":
        return /*#__PURE__*/React.createElement(TribesView, {
          onSelectAvatar: avatar => {
            setSelectedAvatar(avatar);
            setIsModalOpen(true);
          }
        });
      case "leaderboard":
        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
          className: "space-y-4"
        }, leaderboard.map(avatar => /*#__PURE__*/React.createElement("div", {
          key: avatar._id,
          className: "bg-gray-800 p-4 rounded-lg flex items-center gap-4 cursor-pointer",
          onClick: () => {
            setSelectedAvatar(avatar);
            setIsModalOpen(true);
          }
        }, /*#__PURE__*/React.createElement("div", {
          className: "relative shrink-0 ring-2 rounded-full p-1 ".concat({
            'S': 'ring-purple-600',
            'A': 'ring-blue-600',
            'B': 'ring-green-600',
            'C': 'ring-yellow-600',
            'U': 'ring-gray-600'
          }[window.getTierFromModel(avatar.model)])
        }, /*#__PURE__*/React.createElement("img", {
          src: avatar.thumbnailUrl || avatar.imageUrl,
          alt: avatar.name,
          className: "w-16 h-16 object-cover rounded-full"
        })), /*#__PURE__*/React.createElement("div", {
          className: "flex-grow"
        }, /*#__PURE__*/React.createElement("h3", {
          className: "text-lg font-semibold"
        }, avatar.name), /*#__PURE__*/React.createElement("p", {
          className: "text-sm text-gray-400"
        }, "Score: ", avatar.score), avatar.model && /*#__PURE__*/React.createElement("p", {
          className: "text-xs text-gray-500"
        }, avatar.model))))), hasMore && /*#__PURE__*/React.createElement("div", {
          ref: node => {
            if (!node) return;
            const observer = new IntersectionObserver(entries => {
              if (entries[0].isIntersecting && !loading && hasMore) {
                setPage(prevPage => prevPage + 1);
              }
            }, {
              rootMargin: '100px',
              threshold: 0.1
            });
            observer.observe(node);
            if (node._observer) {
              node._observer.disconnect();
            }
            node._observer = observer;
          },
          className: "h-10 flex items-center justify-center"
        }, loading && /*#__PURE__*/React.createElement("p", null, "Loading more...")));
      case "tribes":
        return /*#__PURE__*/React.createElement("div", {
          className: "text-center py-12"
        }, "Tribes content coming soon");
      default:
        return null;
    }
  };
  if (!wallet && activeTab === "owned") {
    return /*#__PURE__*/React.createElement("div", {
      className: "min-h-screen flex flex-col items-center justify-center p-4"
    }, /*#__PURE__*/React.createElement("h1", {
      className: "text-4xl font-bold mb-8 text-center"
    }, "Welcome to Avatar Dashboard"), /*#__PURE__*/React.createElement("p", {
      className: "mb-8 text-gray-400 text-center"
    }, "Connect your wallet to view your avatars"), /*#__PURE__*/React.createElement(WalletButton, {
      onWalletChange: handleWalletChange
    }));
  }
  return /*#__PURE__*/React.createElement("div", {
    className: "container mx-auto px-4 py-8"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex justify-between items-center mb-8"
  }, /*#__PURE__*/React.createElement("h1", {
    className: "text-4xl font-bold"
  }, "Avatar Dashboard"), /*#__PURE__*/React.createElement(WalletButton, {
    onWalletChange: handleWalletChange
  })), /*#__PURE__*/React.createElement("div", {
    className: "flex gap-4 mb-8"
  }, ["owned", "gallery", "leaderboard", "tribes"].map(tab => /*#__PURE__*/React.createElement(TabButton, {
    key: tab,
    label: tab.charAt(0).toUpperCase() + tab.slice(1),
    isActive: activeTab === tab,
    onClick: () => setActiveTab(tab)
  }))), renderTabContent(), /*#__PURE__*/React.createElement(AvatarModal, {
    isOpen: isModalOpen,
    onClose: () => setIsModalOpen(false),
    avatar: selectedAvatar,
    wallet: wallet
  }));
}
const rootElement = document.getElementById("root");
if (rootElement) {
  const root = createRoot(rootElement);
  root.render(/*#__PURE__*/React.createElement(React.StrictMode, null, /*#__PURE__*/React.createElement(App, null)));
}
