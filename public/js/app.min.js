"use strict";

const {
  useState,
  useEffect,
  useCallback
} = React;
const {
  createRoot
} = ReactDOM;
const WalletButton = window.WalletButton;
function TabButton(_ref) {
  let {
    label,
    isActive,
    onClick
  } = _ref;
  return /*#__PURE__*/React.createElement("button", {
    onClick: onClick,
    className: "px-4 py-2 rounded-lg ".concat(isActive ? "bg-blue-600" : "bg-gray-700")
  }, label);
}
function App() {
  const [avatars, setAvatars] = useState([]);
  const [loading, setLoading] = useState(false);
  const [wallet, setWallet] = useState(null);
  const [activeTab, setActiveTab] = useState("owned");
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const resetState = () => {
    setPage(1);
    setHasMore(true);
    setAvatars([]);
  };
  const handleWalletChange = newWallet => {
    setWallet(newWallet);
    if (newWallet) {
      setLoading(true);
      fetch("/api/avatars/owned/".concat(newWallet.publicKey.toString())).then(res => res.json()).then(data => {
        setAvatars(data || []);
        setLoading(false);
      }).catch(error => {
        console.error("Error fetching owned avatars:", error);
        setLoading(false);
      });
    } else {
      setAvatars([]);
    }
  };
  const handleClaimAvatar = async () => {
    if (!wallet) return;
    setLoading(true);
    try {
      const response = await fetch("/api/avatars/claim", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          walletAddress: wallet.publicKey.toString()
        })
      });
      const data = await response.json();
      if (data.success) {
        setAvatars(prev => [...prev, data.avatar]);
      }
    } catch (error) {
      console.error("Error claiming avatar:", error);
    } finally {
      setLoading(false);
    }
  };
  const loadMoreAvatars = useCallback(async () => {
    console.log("[Avatar Loading] Tab: ".concat(activeTab, ", Page: ").concat(page, ", Loading: ").concat(loading, ", HasMore: ").concat(hasMore));
    if (loading) {
      console.log('[Avatar Loading] Skipped - Already loading');
      return;
    }
    if (!hasMore) {
      console.log('[Avatar Loading] Skipped - No more content');
      return;
    }
    if (activeTab === 'owned' && !(wallet !== null && wallet !== void 0 && wallet.publicKey)) {
      console.log('[Avatar Loading] Skipped - Owned tab requires wallet connection');
      return;
    }
    setLoading(true);
    console.log('[Avatar Loading] Starting fetch...');
    try {
      var _data$avatars, _data$avatars2;
      const endpoint = {
        owned: wallet !== null && wallet !== void 0 && wallet.publicKey ? "/api/avatars/owned/".concat(wallet.publicKey.toString(), "?page=").concat(page) : null,
        gallery: "/api/avatars/gallery?page=".concat(page),
        leaderboard: "/api/avatars/leaderboard?page=".concat(page),
        tribes: "/api/tribes?page=".concat(page)
      }[activeTab];
      if (!endpoint) {
        setLoading(false);
        return;
      }
      console.log("[Avatar Loading] Fetching from endpoint: ".concat(endpoint));
      const response = await fetch(endpoint);
      const data = await response.json();
      console.log("[Avatar Loading] Received ".concat(((_data$avatars = data.avatars) === null || _data$avatars === void 0 ? void 0 : _data$avatars.length) || 0, " avatars"));
      if (((_data$avatars2 = data.avatars) === null || _data$avatars2 === void 0 ? void 0 : _data$avatars2.length) === 0) {
        setHasMore(false);
      } else {
        setAvatars(prev => [...prev, ...data.avatars]);
        setPage(prev => prev + 1);
      }
    } catch (error) {
      console.error("[Avatar Loading] Error:", error);
    } finally {
      console.log('[Avatar Loading] Fetch complete');
      setLoading(false);
    }
  }, [activeTab, page, hasMore, loading, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey]);
  useEffect(() => {
    console.log("[Tab Change] Active Tab: ".concat(activeTab, ", Wallet Connected: ").concat(!!(wallet !== null && wallet !== void 0 && wallet.publicKey)));
    resetState();
    if (activeTab !== "owned" || wallet !== null && wallet !== void 0 && wallet.publicKey) {
      loadMoreAvatars();
    }
  }, [activeTab, wallet === null || wallet === void 0 ? void 0 : wallet.publicKey]);
  if (!wallet && activeTab === "owned") {
    return /*#__PURE__*/React.createElement("div", {
      className: "min-h-screen flex flex-col items-center justify-center p-4"
    }, /*#__PURE__*/React.createElement("h1", {
      className: "text-4xl font-bold mb-8 text-center"
    }, "Welcome to Avatar Dashboard"), /*#__PURE__*/React.createElement("p", {
      className: "mb-8 text-gray-400 text-center"
    }, "Connect your wallet to view your avatars"), /*#__PURE__*/React.createElement(WalletButton, {
      onWalletChange: handleWalletChange
    }));
  }
  return /*#__PURE__*/React.createElement("div", {
    className: "container mx-auto px-4 py-8"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex justify-between items-center mb-8"
  }, /*#__PURE__*/React.createElement("h1", {
    className: "text-4xl font-bold"
  }, "Avatar Dashboard"), /*#__PURE__*/React.createElement(WalletButton, {
    onWalletChange: handleWalletChange
  })), /*#__PURE__*/React.createElement("div", {
    className: "flex gap-4 mb-8"
  }, ["owned", "gallery", "leaderboard", "tribes"].map(tab => /*#__PURE__*/React.createElement(TabButton, {
    key: tab,
    label: tab.charAt(0).toUpperCase() + tab.slice(1),
    isActive: activeTab === tab,
    onClick: () => setActiveTab(tab)
  }))), activeTab === "owned" && avatars.length === 0 && !loading && /*#__PURE__*/React.createElement("div", {
    className: "text-center py-12"
  }, /*#__PURE__*/React.createElement("p", {
    className: "text-gray-400 mb-4"
  }, "You don't own any avatars yet"), /*#__PURE__*/React.createElement("button", {
    onClick: handleClaimAvatar,
    className: "bg-blue-600 px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
  }, "Claim Free Avatar")), loading && /*#__PURE__*/React.createElement("p", {
    className: "text-center"
  }, "Loading..."), /*#__PURE__*/React.createElement("div", {
    className: "grid gap-4 grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6"
  }, avatars.map(avatar => /*#__PURE__*/React.createElement(AvatarCard, {
    key: avatar._id,
    avatar: avatar,
    activeTab: activeTab
  }))), hasMore && !loading && /*#__PURE__*/React.createElement("div", {
    className: "text-center mt-8"
  }, /*#__PURE__*/React.createElement("button", {
    onClick: loadMoreAvatars,
    className: "bg-gray-700 px-6 py-2 rounded-lg hover:bg-gray-600 transition-colors"
  }, "Load More")));
}
const rootElement = document.getElementById("root");
if (rootElement) {
  const root = createRoot(rootElement);
  root.render(/*#__PURE__*/React.createElement(React.StrictMode, null, /*#__PURE__*/React.createElement(App, null)));
}
