"use strict";

const {
  useState,
  useEffect
} = React;
const {
  createRoot
} = ReactDOM;

// const { getTierFromModel } = './utils/index';

const WalletButton = window.WalletButton;
function TabButton(_ref) {
  let {
    label,
    isActive,
    onClick
  } = _ref;
  return /*#__PURE__*/React.createElement("button", {
    onClick: onClick,
    className: "px-4 py-2 rounded-lg ".concat(isActive ? "bg-blue-600" : "bg-gray-700")
  }, label);
}
function AvatarModal(_ref2) {
  let {
    isOpen,
    onClose,
    avatar
  } = _ref2;
  if (!isOpen || !avatar) return null;
  return /*#__PURE__*/React.createElement("div", {
    className: "fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50"
  }, /*#__PURE__*/React.createElement("div", {
    className: "bg-white p-8 rounded-lg shadow-lg"
  }, /*#__PURE__*/React.createElement("button", {
    onClick: onClose,
    className: "absolute top-4 right-4"
  }, "Close"), /*#__PURE__*/React.createElement("img", {
    src: avatar.thumbnailUrl || avatar.imageUrl,
    alt: avatar.name,
    className: "w-32 h-32 rounded-full mx-auto mb-4"
  }), /*#__PURE__*/React.createElement("h3", {
    className: "text-lg font-semibold text-center"
  }, avatar.name), /*#__PURE__*/React.createElement("p", {
    className: "text-gray-600 text-center"
  }, "Score: ", avatar.score), avatar.model && /*#__PURE__*/React.createElement("p", {
    className: "text-gray-600 text-center"
  }, avatar.model)));
}
function App() {
  const [wallet, setWallet] = useState(null);
  const [activeTab, setActiveTab] = useState("owned");
  const [leaderboard, setLeaderboard] = useState([]);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [selectedAvatar, setSelectedAvatar] = useState(null); // Added state for modal
  const [isModalOpen, setIsModalOpen] = useState(false); // Added state for modal

  useEffect(() => {
    if (activeTab === "leaderboard") {
      setLeaderboard([]); // Reset when switching to leaderboard
      setPage(1); // Reset page
    }
  }, [activeTab]);
  useEffect(() => {
    if (activeTab === "leaderboard") {
      const fetchLeaderboard = async () => {
        setLoading(true);
        try {
          const response = await fetch("/api/leaderboard?page=".concat(page, "&limit=12"));
          const data = await response.json();
          setLeaderboard(prev => {
            const newAvatars = data.avatars.filter(newAvatar => !prev.some(existingAvatar => existingAvatar._id === newAvatar._id));
            return [...prev, ...newAvatars];
          });
          setHasMore(data.avatars.length === 12);
        } catch (error) {
          console.error('Error fetching leaderboard:', error);
        } finally {
          setLoading(false);
        }
      };
      fetchLeaderboard();
    }
  }, [page, activeTab]);
  const handleWalletChange = newWallet => {
    setWallet(newWallet);
  };
  const renderTabContent = () => {
    switch (activeTab) {
      case "owned":
        return /*#__PURE__*/React.createElement("div", {
          className: "text-center py-12"
        }, "Your owned avatars will appear here");
      case "gallery":
        return /*#__PURE__*/React.createElement("div", {
          className: "text-center py-12"
        }, "Gallery content coming soon");
      case "leaderboard":
        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
          className: "space-y-4"
        }, leaderboard.map(avatar => /*#__PURE__*/React.createElement("div", {
          key: avatar._id,
          className: "bg-gray-800 p-4 rounded-lg flex items-center gap-4 cursor-pointer",
          onClick: () => {
            setSelectedAvatar(avatar);
            setIsModalOpen(true);
          } // Open modal on click
        }, /*#__PURE__*/React.createElement("div", {
          className: "relative shrink-0 ring-2 rounded-full p-1 ".concat({
            'S': 'ring-purple-600',
            'A': 'ring-blue-600',
            'B': 'ring-green-600',
            'C': 'ring-yellow-600',
            'U': 'ring-gray-600'
          }[window.getTierFromModel(avatar.model)])
        }, /*#__PURE__*/React.createElement("img", {
          src: avatar.thumbnailUrl || avatar.imageUrl,
          alt: avatar.name,
          className: "w-16 h-16 object-cover rounded-full"
        })), /*#__PURE__*/React.createElement("div", {
          className: "flex-grow"
        }, /*#__PURE__*/React.createElement("h3", {
          className: "text-lg font-semibold"
        }, avatar.name), /*#__PURE__*/React.createElement("p", {
          className: "text-sm text-gray-400"
        }, "Score: ", avatar.score), avatar.model && /*#__PURE__*/React.createElement("p", {
          className: "text-xs text-gray-500"
        }, avatar.model))))), hasMore && /*#__PURE__*/React.createElement("div", {
          ref: node => {
            if (!node) return;
            const observer = new IntersectionObserver(entries => {
              if (entries[0].isIntersecting && !loading && hasMore) {
                setPage(prevPage => prevPage + 1);
              }
            }, {
              rootMargin: '100px',
              threshold: 0.1
            });
            observer.observe(node);

            // Store observer reference for cleanup
            if (node._observer) {
              node._observer.disconnect();
            }
            node._observer = observer;
          },
          className: "h-10 flex items-center justify-center"
        }, loading && /*#__PURE__*/React.createElement("p", null, "Loading more...")));
      case "tribes":
        return /*#__PURE__*/React.createElement("div", {
          className: "text-center py-12"
        }, "Tribes content coming soon");
      default:
        return null;
    }
  };
  if (!wallet && activeTab === "owned") {
    return /*#__PURE__*/React.createElement("div", {
      className: "min-h-screen flex flex-col items-center justify-center p-4"
    }, /*#__PURE__*/React.createElement("h1", {
      className: "text-4xl font-bold mb-8 text-center"
    }, "Welcome to Avatar Dashboard"), /*#__PURE__*/React.createElement("p", {
      className: "mb-8 text-gray-400 text-center"
    }, "Connect your wallet to view your avatars"), /*#__PURE__*/React.createElement(WalletButton, {
      onWalletChange: handleWalletChange
    }));
  }
  return /*#__PURE__*/React.createElement("div", {
    className: "container mx-auto px-4 py-8"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex justify-between items-center mb-8"
  }, /*#__PURE__*/React.createElement("h1", {
    className: "text-4xl font-bold"
  }, "Avatar Dashboard"), /*#__PURE__*/React.createElement(WalletButton, {
    onWalletChange: handleWalletChange
  })), /*#__PURE__*/React.createElement("div", {
    className: "flex gap-4 mb-8"
  }, ["owned", "gallery", "leaderboard", "tribes"].map(tab => /*#__PURE__*/React.createElement(TabButton, {
    key: tab,
    label: tab.charAt(0).toUpperCase() + tab.slice(1),
    isActive: activeTab === tab,
    onClick: () => setActiveTab(tab)
  }))), renderTabContent(), /*#__PURE__*/React.createElement(AvatarModal, {
    isOpen: isModalOpen,
    onClose: () => setIsModalOpen(false),
    avatar: selectedAvatar
  }), " ");
}
const rootElement = document.getElementById("root");
if (rootElement) {
  const root = createRoot(rootElement);
  root.render(/*#__PURE__*/React.createElement(React.StrictMode, null, /*#__PURE__*/React.createElement(App, null)));
}
